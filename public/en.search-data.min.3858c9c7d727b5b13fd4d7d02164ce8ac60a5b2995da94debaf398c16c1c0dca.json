[{"id":0,"href":"/posts/creating-a-new-theme/","title":"Creating a New Theme","section":"Blog","content":" Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I\u0026rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won\u0026rsquo;t cover using CSS to style your theme.\nWe\u0026rsquo;ll start with creating a new site with a very basic template. Then we\u0026rsquo;ll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026ldquo;$\u0026rdquo; prompt. The output will follow. Lines that start with \u0026ldquo;#\u0026rdquo; are comments that I\u0026rsquo;ve added to explain a point. When I show updates to a file, the \u0026ldquo;:wq\u0026rdquo; on the last line means to save the file.\nHere\u0026rsquo;s an example:\n## this is a comment $ echo this is a command this is a command ## edit the file $ vi foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug :wq ## show it $ cat foo.md +++ date = \u0026#34;2014-09-28\u0026#34; title = \u0026#34;creating a new theme\u0026#34; +++ bah and humbug $ Some Definitions # There are a few concepts that you need to understand before creating a theme.\nSkins # Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Hugo uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Hugo to recognize it. The first place that Hugo will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Hugo where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page # The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Hugo writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File # When Hugo runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Hugo uses the extension to determine how to process it.\nHugo translates Markdown files into HTML. By default, Hugo expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent # Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter # The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Hugo doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendered into HTML.\nMarkdown # Content is written in Markdown which makes it easier to create the content. Hugo runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files # Hugo uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it\u0026rsquo;s published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nHugo uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Hugo’s choice of templates.\nSingle Template # A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template # A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Hugo assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template # A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site # Let\u0026rsquo;s use Hugo to create a new web site. I\u0026rsquo;m a Mac user, so I\u0026rsquo;ll create mine in my home directory, in the Sites folder. If you\u0026rsquo;re using Linux, you might have to create the folder first.\nThe \u0026ldquo;new site\u0026rdquo; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n$ hugo new site ~/Sites/zafta $ cd ~/Sites/zafta $ ls -l total 8 drwxr-xr-x 7 quoha staff 238 Sep 29 16:49 . drwxr-xr-x 3 quoha staff 102 Sep 29 16:49 .. drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That\u0026rsquo;s a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site # Running the hugo command with no options will read all the available content and generate the HTML files. It will also copy all static files (that\u0026rsquo;s everything that\u0026rsquo;s not content). Since we have an empty site, it won\u0026rsquo;t do much, but it will do it very quickly.\n$ hugo --verbose INFO: 2014/09/29 Using config file: config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ The \u0026ldquo;--verbose\u0026rdquo; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026ldquo;INFO:\u0026rdquo; or \u0026ldquo;WARN:\u0026rdquo; is present because we used that flag. The lines that start with \u0026ldquo;WARN:\u0026rdquo; are warning messages. We\u0026rsquo;ll go over them later.\nWe can verify that the command worked by looking at the directory again.\n$ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static $ See that new public/ directory? Hugo placed all generated content there. When you\u0026rsquo;re ready to publish your web site, that\u0026rsquo;s the place to start. For now, though, let\u0026rsquo;s just confirm that we have what we\u0026rsquo;d expect from a site with no content.\n$ ls -l public total 16 -rw-r--r-- 1 quoha staff 416 Sep 29 17:02 index.xml -rw-r--r-- 1 quoha staff 262 Sep 29 17:02 sitemap.xml $ Hugo created two XML files, which is standard, but there are no HTML files.\nTest the New Site # Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026ldquo;server\u0026rdquo; command. If it is successful, you will see output similar to the following:\n$ hugo server --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop Connect to the listed URL (it\u0026rsquo;s on the line that starts with \u0026ldquo;Web Server\u0026rdquo;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That\u0026rsquo;s a listing of your public/ directory. Hugo didn\u0026rsquo;t create a home page because our site has no content. When there\u0026rsquo;s no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Hugo to list the files that it\u0026rsquo;s searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we\u0026rsquo;ll cover later that explain the names and paths. For now, just remember that Hugo couldn\u0026rsquo;t find a template for the home page and it told you so.\nAt this point, you\u0026rsquo;ve got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme # Hugo doesn\u0026rsquo;t ship with a default theme. There are a few available (I counted a dozen when I first installed Hugo) and Hugo comes with a command to create new themes.\nWe\u0026rsquo;re going to create a new theme called \u0026ldquo;zafta.\u0026rdquo; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, Zafta uses \u0026ldquo;post\u0026rdquo; over \u0026ldquo;blog\u0026rdquo;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton # Use the hugo \u0026ldquo;new\u0026rdquo; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n$ hugo new theme zafta $ ls -l total 8 drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 archetypes -rw-r--r-- 1 quoha staff 82 Sep 29 16:49 config.toml drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 content drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:02 public drwxr-xr-x 2 quoha staff 68 Sep 29 16:49 static drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes $ find themes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 1081 Sep 29 17:31 themes/zafta/LICENSE.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html -rw-r--r-- 1 quoha staff 93 Sep 29 17:31 themes/zafta/theme.toml $ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They\u0026rsquo;re optional, but if you\u0026rsquo;re going to be distributing your theme, it tells the world who to praise (or blame). It\u0026rsquo;s also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/zafta/theme.toml author = \u0026#34;michael d henderson\u0026#34; description = \u0026#34;a minimal working template\u0026#34; license = \u0026#34;MIT\u0026#34; name = \u0026#34;zafta\u0026#34; source_repo = \u0026#34;\u0026#34; tags = [\u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34;] :wq ## also edit themes/zafta/LICENSE.md and change ## the bit that says \u0026#34;YOUR_NAME_HERE\u0026#34; Note that the the skeleton\u0026rsquo;s template files are empty. Don\u0026rsquo;t worry, we\u0026rsquo;ll be changing that shortly.\n$ find themes/zafta -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/single.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/footer.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/partials/header.html $ Update the Configuration File to Use the Theme # Now that we\u0026rsquo;ve got a theme to work with, it\u0026rsquo;s a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026ldquo;-t zafta\u0026rdquo; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don\u0026rsquo;t put it in the configuration file or specify it on the command line, you won\u0026rsquo;t use the template that you\u0026rsquo;re expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026#34;zafta\u0026#34; baseurl = \u0026#34;\u0026#34; languageCode = \u0026#34;en-us\u0026#34; title = \u0026#34;zafta - totally refreshing\u0026#34; MetaDataFormat = \u0026#34;toml\u0026#34; :wq $ Generate the Site # Now that we have an empty theme, let\u0026rsquo;s generate the site again.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Hugo is syncing from the theme\u0026rsquo;s directory.\nLet\u0026rsquo;s check the public/ directory to see what Hugo\u0026rsquo;s created.\n$ ls -l public total 16 drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 css -rw-r--r-- 1 quoha staff 0 Sep 29 17:56 index.html -rw-r--r-- 1 quoha staff 407 Sep 29 17:56 index.xml drwxr-xr-x 2 quoha staff 68 Sep 29 17:56 js -rw-r--r-- 1 quoha staff 243 Sep 29 17:56 sitemap.xml $ Notice four things:\nHugo created a home page. This is the file public/index.html. Hugo created a css/ directory. Hugo created a js/ directory. Hugo claimed that it created 0 pages. It created a file and copied over static files, but didn\u0026rsquo;t create any pages. That\u0026rsquo;s because it considers a \u0026ldquo;page\u0026rdquo; to be a file created directly from a content file. It doesn\u0026rsquo;t count things like the index.html files that it creates automatically. The Home Page # Hugo supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Hugo documentation says that this is the only required template, but that depends. Hugo\u0026rsquo;s warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can\u0026rsquo;t find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Hugo created our theme, it created an empty home page template. Now, when we build the site, Hugo finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Hugo would have used them to generate the home page.\n$ find . -name index.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 20:21 ./public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 ./themes/zafta/layouts/index.html $ The Magic of Static # Hugo does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nHugo assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Hugo\u0026rsquo;s opinion is that you\u0026rsquo;ll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don\u0026rsquo;t like that, you can change the directory names in your theme directory or even delete them completely. Hugo\u0026rsquo;s nice enough to offer its opinion, then behave nicely if you disagree.\n$ find themes/zafta -type d | xargs ls -ld drwxr-xr-x 7 quoha staff 238 Sep 29 17:38 themes/zafta drwxr-xr-x 3 quoha staff 102 Sep 29 17:31 themes/zafta/archetypes drwxr-xr-x 5 quoha staff 170 Sep 29 17:31 themes/zafta/layouts drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/_default drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/layouts/partials drwxr-xr-x 4 quoha staff 136 Sep 29 17:31 themes/zafta/static drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/css drwxr-xr-x 2 quoha staff 68 Sep 29 17:31 themes/zafta/static/js $ The Theme Development Cycle # When you\u0026rsquo;re working on a theme, you will make changes in the theme\u0026rsquo;s directory, rebuild the site, and check your changes in the browser. Hugo makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Hugo site for information on using Git with Hugo.\nPurge the public/ Directory # When generating the site, Hugo will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you\u0026rsquo;re building on an SSD, you should ignore this. Churning on a SSD can be costly.\nHugo\u0026rsquo;s Watch Option # Hugo\u0026rsquo;s \u0026ldquo;--watch\u0026rdquo; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload # Hugo\u0026rsquo;s built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026ldquo;Wow, that\u0026rsquo;s totally amazing.\u0026rdquo;\nDevelopment Commands # Use the following commands as the basis for your workflow.\n## purge old files. hugo will recreate the public directory. ## $ rm -rf public ## ## run hugo in watch mode ## $ hugo server --watch --verbose Here\u0026rsquo;s sample output showing Hugo detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I\u0026rsquo;ve said this before, it\u0026rsquo;s amazing.\n$ rm -rf public $ hugo server --watch --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/quoha/Sites/zafta/content Serving pages from /Users/quoha/Sites/zafta/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026#34;/Users/quoha/Sites/zafta/themes/zafta/layouts/index.html\u0026#34;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template # The home page is one of a few special pages that Hugo creates automatically. As mentioned earlier, it looks for one of three files in the theme\u0026rsquo;s layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That\u0026rsquo;s not a hard and fast rule (in fact, we\u0026rsquo;ll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page # Right now, that page is empty because we don\u0026rsquo;t have any content and we don\u0026rsquo;t have any logic in the template. Let\u0026rsquo;s change that by adding some text to the template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and then verify the results.\n$ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 21:26 public/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;/html\u0026gt; Live Reload # Note: If you\u0026rsquo;re running the server with the --watch option, you\u0026rsquo;ll see different content in the file:\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;hugo says hello!\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Hugo. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026ldquo;Dynamic\u0026rdquo; Home Page # \u0026ldquo;Dynamic home page?\u0026rdquo; Hugo\u0026rsquo;s a static web site generator, so this seems an odd thing to say. I mean let\u0026rsquo;s have the home page automatically reflect the content in the site every time Hugo builds it. We\u0026rsquo;ll use iteration in the template to do that.\nCreate New Posts # Now that we have the home page generating static content, let\u0026rsquo;s add some content to the site. We\u0026rsquo;ll display these posts as a list on the home page and on their own page, too.\nHugo has a command to generate a skeleton post, just like it does for sites and themes.\n$ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/default.md ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} $ That wasn\u0026rsquo;t very nice, was it?\nThe \u0026ldquo;new\u0026rdquo; command uses an archetype to create the post file. Hugo created an empty default archetype file, but that causes an error when there\u0026rsquo;s a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n$ vi themes/zafta/archetypes/post.md +++ Description = \u0026#34;\u0026#34; Tags = [] Categories = [] +++ :wq $ find themes/zafta/archetypes -type f | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 21:53 themes/zafta/archetypes/default.md -rw-r--r-- 1 quoha staff 51 Sep 29 21:54 themes/zafta/archetypes/post.md $ hugo --verbose new post/first.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/first.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/first.md /Users/quoha/Sites/zafta/content/post/first.md created $ hugo --verbose new post/second.md INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 attempting to create post/second.md of post INFO: 2014/09/29 curpath: /Users/quoha/Sites/zafta/themes/zafta/archetypes/post.md INFO: 2014/09/29 creating /Users/quoha/Sites/zafta/content/post/second.md /Users/quoha/Sites/zafta/content/post/second.md created $ ls -l content/post total 16 -rw-r--r-- 1 quoha staff 104 Sep 29 21:54 first.md -rw-r--r-- 1 quoha staff 105 Sep 29 21:57 second.md $ cat content/post/first.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; title = \u0026#34;first\u0026#34; +++ my first post $ cat content/post/second.md +++ Categories = [] Description = \u0026#34;\u0026#34; Tags = [] date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; title = \u0026#34;second\u0026#34; +++ my second post $ Build the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ The output says that it created 2 pages. Those are our new posts:\n$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 78 Sep 29 22:13 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:13 public/post/second/index.html $ The new files are empty because because the templates used to generate the content are empty. The homepage doesn\u0026rsquo;t show the new content, either. We have to update the templates to add the posts.\nList and Single Templates # In Hugo, we have three major kinds of templates. There\u0026rsquo;s the home page template that we updated previously. It is used only by the home page. We also have \u0026ldquo;single\u0026rdquo; templates which are used to generate output for a single content file. We also have \u0026ldquo;list\u0026rdquo; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026ldquo;list.html\u0026rdquo; and single templates are named \u0026ldquo;single.html.\u0026rdquo;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage # The home page will contain a list of posts. Let\u0026rsquo;s update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Hugo uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026ldquo;{{\u0026rdquo; and \u0026ldquo;}}\u0026rdquo;. In our template, the commands are:\nrange .Title end The \u0026ldquo;range\u0026rdquo; command is an iterator. We\u0026rsquo;re going to use it to go through the first ten pages. Every HTML file that Hugo creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026ldquo;.Title\u0026rdquo; command prints the value of the \u0026ldquo;title\u0026rdquo; variable. Hugo pulls it from the front matter in the Markdown file.\nThe \u0026ldquo;end\u0026rdquo; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026ldquo;end.\u0026rdquo; Everything between the \u0026ldquo;range\u0026rdquo; and \u0026ldquo;end\u0026rdquo; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt\u0026rsquo;s helpful to remember that some variables, like .Data, are created before any output files. Hugo loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:23 public/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:23 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let\u0026rsquo;s take a moment to appreciate what we\u0026rsquo;ve done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you\u0026rsquo;ve learned everything you need to know to build a theme. All that\u0026rsquo;s really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don\u0026rsquo;t worry, though, that\u0026rsquo;s all to come.\nAdd Content to the Posts # We\u0026rsquo;re working with posts, which are in the content/post/ directory. That means that their section is \u0026ldquo;post\u0026rdquo; (and if we don\u0026rsquo;t do something weird, their type is also \u0026ldquo;post\u0026rdquo;).\nHugo uses the section and type to find the template file for every piece of content. Hugo will first look for a template file that matches the section or type name. If it can\u0026rsquo;t find one, then it will look in the _default/ directory. There are some twists that we\u0026rsquo;ll cover when we get to categories and tags, but for now we can assume that Hugo will try post/single.html, then _default/single.html.\nNow that we know the search rule, let\u0026rsquo;s see what we actually have available:\n$ find themes/zafta -name single.html | xargs ls -l -rw-r--r-- 1 quoha staff 132 Sep 29 17:31 themes/zafta/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don\u0026rsquo;t know of any other content types, let\u0026rsquo;s start with updating the default.\nRemember, any content that we haven\u0026rsquo;t created a template for will end up using this template. That can be good or bad. Bad because I know that we\u0026rsquo;re going to be adding different types of content and we\u0026rsquo;re going to end up undoing some of the changes we\u0026rsquo;ve made. It\u0026rsquo;s good because we\u0026rsquo;ll be able to see immediate results. It\u0026rsquo;s also good to start here because we can start to build the basic layout for the site. As we add more content types, we\u0026rsquo;ll refactor this file and move logic around. Hugo makes that fairly painless, so we\u0026rsquo;ll accept the cost and proceed.\nPlease see the Hugo documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you\u0026rsquo;re building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That\u0026rsquo;s a refreshing amount of joy right there.\nUpdate the Template File # $ vi themes/zafta/layouts/_default/single.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq $ Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:40 public/post/second/index.html $ cat public/post/first/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ cat public/post/second/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content # The posts are on the home page. Let\u0026rsquo;s add a link from there to the post. Since this is the home page, we\u0026rsquo;ll update its template.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; {{ range first 10 .Data.Pages }} \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Build the web site and verify the results.\n$ rm -rf public $ hugo --verbose INFO: 2014/09/29 Using config file: /Users/quoha/Sites/zafta/config.toml INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/themes/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 syncing from /Users/quoha/Sites/zafta/static/ to /Users/quoha/Sites/zafta/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-r--r-- 1 quoha staff 149 Sep 29 22:44 public/index.html -rw-r--r-- 1 quoha staff 125 Sep 29 22:44 public/post/first/index.html -rw-r--r-- 1 quoha staff 0 Sep 29 22:44 public/post/index.html -rw-r--r-- 1 quoha staff 128 Sep 29 22:44 public/post/second/index.html $ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ Create a Post Listing # We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let\u0026rsquo;s make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let\u0026rsquo;s take a quick look and see which list templates are available.\n$ find themes/zafta -name list.html | xargs ls -l -rw-r--r-- 1 quoha staff 0 Sep 29 17:31 themes/zafta/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don\u0026rsquo;t have multiple content types, so let\u0026rsquo;s stay consistent and update the default list template.\nCreating Top Level Pages # Let\u0026rsquo;s add an \u0026ldquo;about\u0026rdquo; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Hugo is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let\u0026rsquo;s verify that by creating an \u0026ldquo;about\u0026rdquo; page at the top level:\n$ vi content/about.md +++ title = \u0026#34;about\u0026#34; description = \u0026#34;about this site\u0026#34; date = \u0026#34;2014-09-27\u0026#34; slug = \u0026#34;about time\u0026#34; +++ ## about us i\u0026#39;m speechless :wq Generate the web site and verify the results.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn\u0026rsquo;t created at the top level. It was created in a sub-directory named \u0026lsquo;about-time/\u0026rsquo;. That name came from our slug. Hugo will use the slug to name the generated content. It\u0026rsquo;s a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n$ cat public/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Notice that the \u0026ldquo;about\u0026rdquo; link is listed with the posts? That\u0026rsquo;s not desirable, so let\u0026rsquo;s change that first.\n$ vi themes/zafta/layouts/index.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if eq .Type \u0026#34;page\u0026#34; }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n$ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that hugo is using the slug to generate the file name, the simplest solution is to change the slug. Let\u0026rsquo;s do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026#34;/:title/\u0026#34; about = \u0026#34;/:filename/\u0026#34; Generate the web site and verify that this didn\u0026rsquo;t work. Hugo lets \u0026ldquo;slug\u0026rdquo; or \u0026ldquo;URL\u0026rdquo; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates # If you\u0026rsquo;ve been following along, you probably noticed that posts have titles in the browser and the home page doesn\u0026rsquo;t. That\u0026rsquo;s because we didn\u0026rsquo;t put the title in the home page\u0026rsquo;s template (layouts/index.html). That\u0026rsquo;s an easy thing to do, but let\u0026rsquo;s look at a different option.\nWe can put the common bits into a shared template that\u0026rsquo;s stored in the themes/zafta/layouts/partials/ directory.\nCreate the Header and Footer Partials # In Hugo, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Hugo searches for them along a TODO defined search path. This makes it easier for end-users to override the theme\u0026rsquo;s presentation.\n$ vi themes/zafta/layouts/partials/header.html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; :wq $ vi themes/zafta/layouts/partials/footer.html \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; :wq Update the Home Page Template to Use the Partials # The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026#34;theme/partials/header.html\u0026#34; . }} versus\n{{ partial \u0026#34;header.html\u0026#34; . }} Both pass in the context.\nLet\u0026rsquo;s change the home page template to use these new partials.\n$ vi themes/zafta/layouts/index.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; {{ range first 10 .Data.Pages }} {{ if eq .Type \u0026#34;post\u0026#34;}} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; {{ range .Data.Pages }} {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; {{ end }} {{ end }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the home page is now \u0026ldquo;your title here\u0026rdquo;, which comes from the \u0026ldquo;title\u0026rdquo; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials # $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts # It\u0026rsquo;s common to have posts display the date that they were written or published, so let\u0026rsquo;s add that. The front matter of our posts has a variable named \u0026ldquo;date.\u0026rdquo; It\u0026rsquo;s usually the date the content was created, but let\u0026rsquo;s pretend that\u0026rsquo;s the value we want to display.\nAdd “Date Published” to the Template # We\u0026rsquo;ll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }} Posts use the default single template, so we\u0026rsquo;ll change that file.\n$ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Generate the web site and verify the results. The posts now have the date displayed in them. There\u0026rsquo;s a problem, though. The \u0026ldquo;about\u0026rdquo; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026ldquo;if\u0026rdquo; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026ldquo;if\u0026rdquo; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026ldquo;code for today,\u0026rdquo; too.\nLet\u0026rsquo;s assume, though, that we\u0026rsquo;ve made our site so complex that we feel we have to create a new template type. In Hugo-speak, we\u0026rsquo;re going to create a section template.\nLet\u0026rsquo;s restore the default single template before we forget.\n$ mkdir themes/zafta/layouts/post $ vi themes/zafta/layouts/_default/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Now we\u0026rsquo;ll update the post\u0026rsquo;s version of the single template. If you remember Hugo\u0026rsquo;s rules, the template engine will use this version over the default.\n$ vi themes/zafta/layouts/post/single.html {{ partial \u0026#34;header.html\u0026#34; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; {{ .Content }} {{ partial \u0026#34;footer.html\u0026#34; . }} :wq Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn\u0026rsquo;t.\nDon\u0026rsquo;t Repeat Yourself # DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you\u0026rsquo;re figuring that out, accept that you\u0026rsquo;ll be doing some refactoring. Hugo makes that easy and fast, so it\u0026rsquo;s okay to delay splitting up a template.\n"},{"id":1,"href":"/posts/migrate-from-jekyll/","title":"Migrating from Jekyll","section":"Blog","content":" Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like\n▾ \u0026lt;root\u0026gt;/ ▾ images/ logo.png should become\n▾ \u0026lt;root\u0026gt;/ ▾ static/ ▾ images/ logo.png Additionally, you\u0026rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.\nCreate your Hugo configuration file # Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.\nSet your configuration publish folder to _site # The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you\u0026rsquo;ll want to do one of two alternatives:\nChange your submodule to point to map gh-pages to public instead of _site (recommended).\ngit submodule deinit _site git rm _site git submodule add -b gh-pages git@github.com:your-username/your-repo.git public Or, change the Hugo configuration to use _site instead of public.\n{ .. \u0026quot;publishdir\u0026quot;: \u0026quot;_site\u0026quot;, .. } Convert Jekyll templates to Hugo templates # That\u0026rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to Jekyll\u0026rsquo;s template documentation if you need to refresh your memory on how you built your blog and Hugo\u0026rsquo;s template to learn Hugo\u0026rsquo;s way.\nAs a single reference data point, converting my templates for heyitsalex.net took me no more than a few hours.\nConvert Jekyll plugins to Hugo shortcodes # Jekyll has plugins; Hugo has shortcodes. It\u0026rsquo;s fairly trivial to do a port.\nImplementation # As an example, I was using a custom image_tag plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.\nJekyll\u0026rsquo;s plugin:\nmodule Jekyll class ImageTag \u0026lt; Liquid::Tag @url = nil @caption = nil @class = nil @link = nil // Patterns IMAGE_URL_WITH_CLASS_AND_CAPTION = IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;(\\s+)-\u0026gt;((https?:\\/\\/|\\/)(\\S+))(\\s*)/i IMAGE_URL_WITH_CAPTION = /((https?:\\/\\/|\\/)(\\S+))(\\s+)\u0026quot;(.*?)\u0026quot;/i IMAGE_URL_WITH_CLASS = /(\\w+)(\\s+)((https?:\\/\\/|\\/)(\\S+))/i IMAGE_URL = /((https?:\\/\\/|\\/)(\\S+))/i def initialize(tag_name, markup, tokens) super if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK @class = $1 @url = $3 @caption = $7 @link = $9 elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION @class = $1 @url = $3 @caption = $7 elsif markup =~ IMAGE_URL_WITH_CAPTION @url = $1 @caption = $5 elsif markup =~ IMAGE_URL_WITH_CLASS @class = $1 @url = $3 elsif markup =~ IMAGE_URL @url = $1 end end def render(context) if @class source = \u0026quot;\u0026lt;figure class='#{@class}'\u0026gt;\u0026quot; else source = \u0026quot;\u0026lt;figure\u0026gt;\u0026quot; end if @link source += \u0026quot;\u0026lt;a href=\\\u0026quot;#{@link}\\\u0026quot;\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;img src=\\\u0026quot;#{@url}\\\u0026quot;\u0026gt;\u0026quot; if @link source += \u0026quot;\u0026lt;/a\u0026gt;\u0026quot; end source += \u0026quot;\u0026lt;figcaption\u0026gt;#{@caption}\u0026lt;/figcaption\u0026gt;\u0026quot; if @caption source += \u0026quot;\u0026lt;/figure\u0026gt;\u0026quot; source end end end Liquid::Template.register_tag('image', Jekyll::ImageTag) is written as this Hugo shortcode:\n\u0026lt;!-- image --\u0026gt; \u0026lt;figure {{ with .Get \u0026quot;class\u0026quot; }}class=\u0026quot;{{.}}\u0026quot;{{ end }}\u0026gt; {{ with .Get \u0026quot;link\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt;{{ end }} \u0026lt;img src=\u0026quot;{{ .Get \u0026quot;src\u0026quot; }}\u0026quot; {{ if or (.Get \u0026quot;alt\u0026quot;) (.Get \u0026quot;caption\u0026quot;) }}alt=\u0026quot;{{ with .Get \u0026quot;alt\u0026quot;}}{{.}}{{else}}{{ .Get \u0026quot;caption\u0026quot; }}{{ end }}\u0026quot;{{ end }} /\u0026gt; {{ if .Get \u0026quot;link\u0026quot;}}\u0026lt;/a\u0026gt;{{ end }} {{ if or (or (.Get \u0026quot;title\u0026quot;) (.Get \u0026quot;caption\u0026quot;)) (.Get \u0026quot;attr\u0026quot;)}} \u0026lt;figcaption\u0026gt;{{ if isset .Params \u0026quot;title\u0026quot; }} {{ .Get \u0026quot;title\u0026quot; }}{{ end }} {{ if or (.Get \u0026quot;caption\u0026quot;) (.Get \u0026quot;attr\u0026quot;)}}\u0026lt;p\u0026gt; {{ .Get \u0026quot;caption\u0026quot; }} {{ with .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;a href=\u0026quot;{{.}}\u0026quot;\u0026gt; {{ end }} {{ .Get \u0026quot;attr\u0026quot; }} {{ if .Get \u0026quot;attrlink\u0026quot;}}\u0026lt;/a\u0026gt; {{ end }} \u0026lt;/p\u0026gt; {{ end }} \u0026lt;/figcaption\u0026gt; {{ end }} \u0026lt;/figure\u0026gt; \u0026lt;!-- image --\u0026gt; Usage # I simply changed:\n{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg \u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were \u0026quot;having fun\u0026quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; -\u0026gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %} to this (this example uses a slightly extended version named fig, different than the built-in figure):\n{{% fig class=\u0026quot;full\u0026quot; src=\u0026quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg\u0026quot; title=\u0026quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.\u0026quot; link=\u0026quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/\u0026quot; %}} As a bonus, the shortcode named parameters are, arguably, more readable.\nFinishing touches # Fix content # Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that hugo server --watch is your friend. Test your changes and fix errors as needed.\nClean up # You\u0026rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn\u0026rsquo;t used, delete it.\nA practical example in a diff # Hey, it\u0026rsquo;s Alex was migrated in less than a father-with-kids day from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this diff.\n"},{"id":2,"href":"/posts/goisforlovers/","title":"(Hu)go Template Primer","section":"Blog","content":"Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates # Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax # Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026ldquo;foo\u0026rdquo;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026ldquo;bar\u0026rdquo;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables # Each Go template has a struct (object) made available to it. In hugo each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions # Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Hugo template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling hugo.\nExample:\n{{ add 1 2 }} Includes # When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Hugo.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic # Go templates provide the most basic iteration and conditional logic.\nIteration # Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals # If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes # One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline\u0026rsquo;s output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026ldquo;disqus_url\u0026rdquo; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) # The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nHugo Parameters # Hugo provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters # In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn\u0026rsquo;t make a lot of sense. We\u0026rsquo;ve defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n--- title: \u0026#34;Permalinks\u0026#34; date: \u0026#34;2013-11-18\u0026#34; aliases: - \u0026#34;/doc/permalinks/\u0026#34; groups: [\u0026#34;extras\u0026#34;] groups_weight: 30 notoc: true --- Here is the corresponding code inside of the template:\n{{ if not .Params.notoc }} \u0026lt;div id=\u0026quot;toc\u0026quot; class=\u0026quot;well col-md-4 col-sm-6\u0026quot;\u0026gt; {{ .TableOfContents }} \u0026lt;/div\u0026gt; {{ end }} Using Site (config) Parameters # In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\nparams: CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; TwitterUser: \u0026#34;spf13\u0026#34; SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n{{if .Site.Params.CopyrightHTML}}\u0026lt;footer\u0026gt; \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt;{{end}} An alternative way of writing the \u0026ldquo;if\u0026rdquo; and then referencing the same value is to use \u0026ldquo;with\u0026rdquo; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n{{with .Site.Params.TwitterUser}}\u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/span\u0026gt;{{end}} Finally, if you want to pull \u0026ldquo;magic constants\u0026rdquo; out of your layouts, you can do so, such as in this example:\n\u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; {{end}}\u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; "},{"id":3,"href":"/posts/hugoisforlovers/","title":"Getting Started with Hugo","section":"Blog","content":" Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.\nSave it somewhere specific as we will be using it in the next step.\nMore complete instructions are available at Install Hugo\nStep 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.\nFollow the following steps:\nClone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:\ngit clone https://github.com/spf13/hugo cd hugo /path/to/where/you/installed/hugo server --source=./docs \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Press ctrl+c to stop Once you\u0026rsquo;ve gotten here, follow along the rest of this page on your local build.\nStep 3. Change the docs site # Stop the Hugo process by hitting Ctrl+C.\nNow we are going to run hugo again, but this time with hugo in watch mode.\n/path/to/hugo/from/step/1/hugo server --source=./docs --watch \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 27 ms \u0026gt; Web Server is available at http://localhost:1313 \u0026gt; Watching for changes in /Users/spf13/Code/hugo/docs/content \u0026gt; Press ctrl+c to stop Open your favorite editor and change one of the source content pages. How about changing this very file to fix the typo. How about changing this very file to fix the typo.\nContent files are found in docs/content/. Unless otherwise specified, files are located at the same relative location as the url, in our case docs/content/overview/quickstart.md.\nChange and save this file.. Notice what happened in your terminal.\n\u0026gt; Change detected, rebuilding site \u0026gt; 29 pages created \u0026gt; 0 tags index created \u0026gt; in 26 ms Refresh the browser and observe that the typo is now fixed.\nNotice how quick that was. Try to refresh the site before it\u0026rsquo;s finished building. I double dare you. Having nearly instant feedback enables you to have your creativity flow without waiting for long builds.\nStep 4. Have fun # The best way to learn something is to play with it.\n"},{"id":4,"href":"/docs/advanced/build/","title":"Build","section":"Docs","content":"Unless you really need to build Codon for whatever reason, we strongly recommend using pre-built binaries if possible.\nDependencies # Codon uses an LLVM fork based on LLVM 17. To build it, you can do:\ngit clone --depth 1 -b codon https://github.com/exaloop/llvm-project cmake -S llvm-project/llvm -B llvm-project/build \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_INCLUDE_TESTS=OFF \\ -DLLVM_ENABLE_RTTI=ON \\ -DLLVM_ENABLE_ZLIB=OFF \\ -DLLVM_ENABLE_ZSTD=OFF \\ -DLLVM_ENABLE_TERMINFO=OFF \\ -DLLVM_TARGETS_TO_BUILD=all cmake --build llvm-project/build cmake --install llvm-project/build --prefix=llvm-project/install You can also add -DLLVM_ENABLE_PROJECTS=clang if you do not have clang installed on your system. We also recommend setting a local prefix during installation to avoid clashes with the system LLVM.\nBuild # Codon requires libgfortran, the parent directory of which must be specified via the CODON_SYSTEM_LIBRARIES environment variable. For example, on macOS, with a brew-installed libgfortran (obtainable via brew install gcc):\nexport CODON_SYSTEM_LIBRARIES=/opt/homebrew/opt/gcc/lib/gcc/current On Linux:\nexport CODON_SYSTEM_LIBRARIES=/usr/lib/x86_64-linux-gnu Then, the following can generally be used to build Codon. The build process will automatically download and build several smaller dependencies.\ncmake -S . -B build \\ -DCMAKE_BUILD_TYPE=Release \\ -DLLVM_DIR=$(llvm-config --cmakedir) \\ -DCMAKE_C_COMPILER=clang \\ -DCMAKE_CXX_COMPILER=clang++ cmake --build build --config Release cmake --install build --prefix=install This will produce the codon executable in the install/bin directory, as well as codon_test in the build directory which runs the test suite. Additionally, a number of shared libraries are produced in install/lib/codon:\nlibcodonc: The compiler library used by the codon command-line tool. libcodonrt: The runtime library used during execution. libomp: OpenMP runtime used to execute parallel code. {% hint style=\u0026ldquo;warning\u0026rdquo; %} Make sure the llvm-config being used corresponds to Codon\u0026rsquo;s LLVM. You can also use -DLLVM_DIR=llvm-project/install/lib/cmake/llvm on the first cmake command if you followed the instructions above for compiling LLVM. {% endhint %}\nGPU support # Add -DCODON_GPU=ON to the first cmake command above to enable GPU support.\nJupyter support # To enable Jupyter support, you will need to build the Jupyter plugin:\n# Linux version: cmake -S jupyter -B jupyter/build \\ -DCMAKE_BUILD_TYPE=Release \\ -DCMAKE_C_COMPILER=clang \\ -DCMAKE_CXX_COMPILER=clang++ \\ -DLLVM_DIR=$(llvm-config --cmakedir) \\ -DCODON_PATH=install \\ -DOPENSSL_ROOT_DIR=$(openssl version -d | cut -d\u0026#39; \u0026#39; -f2 | tr -d \u0026#39;\u0026#34;\u0026#39;) \\ -DOPENSSL_CRYPTO_LIBRARY=/usr/lib64/libssl.so \\ -DXEUS_USE_DYNAMIC_UUID=ON # n.b. OPENSSL_CRYPTO_LIBRARY might differ on your system. # On macOS, do this instead: OPENSSL_ROOT_DIR=/usr/local/opt/openssl cmake -S jupyter -B jupyter/build \\ -DCMAKE_BUILD_TYPE=Release \\ -DCMAKE_C_COMPILER=clang \\ -DCMAKE_CXX_COMPILER=clang++ \\ -DLLVM_DIR=$(llvm-config --cmakedir) \\ -DCODON_PATH=install # Then: cmake --build jupyter/build cmake --install jupyter/build "},{"id":5,"href":"/docs/advanced/gpu/","title":"Gpu","section":"Docs","content":"Codon supports GPU programming through a native GPU backend. Currently, only Nvidia devices are supported. Here is a simple example:\nimport gpu @gpu.kernel def hello(a, b, c): i = gpu.thread.x c[i] = a[i] + b[i] a = [i for i in range(16)] b = [2*i for i in range(16)] c = [0 for _ in range(16)] hello(a, b, c, grid=1, block=16) print(c) which outputs:\n[0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45] The same code can be written using Codon\u0026rsquo;s @par syntax:\na = [i for i in range(16)] b = [2*i for i in range(16)] c = [0 for _ in range(16)] @par(gpu=True) for i in range(16): c[i] = a[i] + b[i] print(c) Below is a more comprehensive example for computing the Mandelbrot set, and plotting it using NumPy/Matplotlib:\nfrom python import numpy as np from python import matplotlib.pyplot as plt import gpu MAX = 1000 # maximum Mandelbrot iterations N = 4096 # width and height of image pixels = [0 for _ in range(N * N)] def scale(x, a, b): return a + (x/N)*(b - a) @gpu.kernel def mandelbrot(pixels): idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x i, j = divmod(idx, N) c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12)) z = 0j iteration = 0 while abs(z) \u0026lt;= 2 and iteration \u0026lt; MAX: z = z**2 + c iteration += 1 pixels[idx] = int(255 * iteration/MAX) mandelbrot(pixels, grid=(N*N)//1024, block=1024) plt.imshow(np.array(pixels).reshape(N, N)) plt.show() The GPU version of the Mandelbrot code is about 450 times faster than an equivalent CPU version.\nGPU kernels are marked with the @gpu.kernel annotation, and compiled specially in Codon\u0026rsquo;s backend. Kernel functions can use the vast majority of features supported in Codon, with a couple notable exceptions:\nException handling is not supported inside the kernel, meaning kernel code should not throw or catch exceptions. raise statements inside the kernel are marked as unreachable and optimized out.\nFunctionality related to I/O is not supported (e.g. you can\u0026rsquo;t open a file in the kernel).\nA few other modules and functions are not allowed, such as the re module (which uses an external regex library) or the os module.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} The GPU module is under active development. APIs and semantics might change between Codon releases. {% endhint %}\nInvoking the kernel # The kernel can be invoked via a simple call with added grid and block parameters. These parameters define the grid and block dimensions, respectively. Recall that GPU execution involves a grid of (X x Y x Z) blocks where each block contains (x x y x z) executing threads. Device-specific restrictions on grid and block sizes apply.\nThe grid and block parameters can be one of:\nSingle integer x, giving dimensions (x, 1, 1) Tuple of two integers (x, y), giving dimensions (x, y, 1) Tuple of three integers (x, y, z), giving dimensions (x, y, z) Instance of gpu.Dim3 as in Dim3(x, y, z), specifying the three dimensions GPU intrinsics # Codon\u0026rsquo;s GPU module provides many of the same intrinsics that CUDA does:\nCodon Description CUDA equivalent gpu.thread.x x-coordinate of current thread in block threadId.x gpu.block.x x-coordinate of current block in grid blockIdx.x gpu.block.dim.x x-dimension of block blockDim.x gpu.grid.dim.x x-dimension of grid gridDim.x The same applies for the y and z coordinates. The *.dim objects are instances of gpu.Dim3.\nMath functions # All the functions in the math module are supported in kernel functions, and are automatically replaced with GPU-optimized versions:\nimport math import gpu @gpu.kernel def hello(x): i = gpu.thread.x x[i] = math.sqrt(x[i]) # uses __nv_sqrt from libdevice x = [float(i) for i in range(10)] hello(x, grid=1, block=10) print(x) gives:\n[0, 1, 1.41421, 1.73205, 2, 2.23607, 2.44949, 2.64575, 2.82843, 3] Libdevice # Codon uses libdevice for GPU-optimized math functions. The default libdevice path is /usr/local/cuda/nvvm/libdevice/libdevice.10.bc. An alternative path can be specified via the -libdevice compiler flag.\nWorking with raw pointers # By default, objects are converted entirely to their GPU counterparts, which have the same data layout as the original objects (although the Codon compiler might perform optimizations by swapping a CPU implementation of a data type with a GPU-optimized implementation that exposes the same API). This preserves all of Codon/Python\u0026rsquo;s standard semantics within the kernel.\nIt is possible to use a kernel with raw pointers via gpu.raw, which corresponds to how the kernel would be written in C++/CUDA:\nimport gpu @gpu.kernel def hello(a, b, c): i = gpu.thread.x c[i] = a[i] + b[i] a = [i for i in range(16)] b = [2*i for i in range(16)] c = [0 for _ in range(16)] # call the kernel with three int-pointer arguments: hello(gpu.raw(a), gpu.raw(b), gpu.raw(c), grid=1, block=16) print(c) # output same as first snippet\u0026#39;s gpu.raw can avoid an extra pointer indirection, but outputs a Codon Ptr object, meaning the corresponding kernel parameters will not have the full list API, instead having the more limited Ptr API (which primarily just supports indexing/assignment).\nObject conversions # A hidden API is used to copy objects to and from the GPU device. This API consists of two new magic methods:\n__to_gpu__(self): Allocates the necessary GPU memory and copies the object self to the device.\n__from_gpu__(self, gpu_object): Copies the GPU memory of gpu_object (which is a value returned by __to_gpu__) back to the CPU object self.\nFor primitive types like int and float, __to_gpu__ simply returns self and __from_gpu__ does nothing. These methods are defined for all the built-in types and are automatically generated for user-defined classes, so most objects can be transferred back and forth from the GPU seamlessly. A user-defined class that makes use of raw pointers or other low-level constructs will have to define these methods for GPU use. Please refer to the gpu module for implementation examples.\n@par(gpu=True) # Codon\u0026rsquo;s @par syntax can be used to seamlessly parallelize existing loops on the GPU, without needing to explicitly write them as kernels. For loop nests, the collapse argument can be used to cover the entire iteration space on the GPU. For example, here is the Mandelbrot code above written using @par:\nMAX = 1000 # maximum Mandelbrot iterations N = 4096 # width and height of image pixels = [0 for _ in range(N * N)] def scale(x, a, b): return a + (x/N)*(b - a) @par(gpu=True, collapse=2) for i in range(N): for j in range(N): c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12)) z = 0j iteration = 0 while abs(z) \u0026lt;= 2 and iteration \u0026lt; MAX: z = z**2 + c iteration += 1 pixels[i*N + j] = int(255 * iteration/MAX) Note that the gpu=True option disallows shared variables (i.e. assigning out-of-loop variables in the loop body) as well as reductions. The other GPU-specific restrictions described here apply as well.\nTroubleshooting # CUDA errors resulting in kernel abortion are printed, and typically arise from invalid code in the kernel, either via using exceptions or using unsupported modules/objects.\n"},{"id":6,"href":"/docs/advanced/ir/","title":"Ir","section":"Docs","content":"After type checking but before native code generation, the Codon compiler makes use of a new intermediate representation called CIR, where a number of higher-level optimizations, transformations and analyses take place. CIR offers a comprehensive framework for writing new optimizations or analyses without having to deal with cumbersome abstract syntax trees (ASTs). In this section we\u0026rsquo;ll give an overview of CIR, discuss the types of things you might want to use it for, and give a few examples.\nAt a glance # Here is a small (simplified) example showcasing CIR in action. Consider the code:\ndef fib(n): if n \u0026lt; 2: return 1 else: return fib(n - 1) + fib(n - 2) When instantiated with an int argument, the following IR gets produced (the names have been cleaned up for simplicity):\n(bodied_func \u0026#39;\u0026#34;fib[int]\u0026#34; (type \u0026#39;\u0026#34;fib[int]\u0026#34;) (args (var \u0026#39;\u0026#34;n\u0026#34; (type \u0026#39;\u0026#34;int\u0026#34;) (global false))) (vars) (series (if (call \u0026#39;\u0026#34;int.__lt__[int,int]\u0026#34; \u0026#39;\u0026#34;n\u0026#34; 2) (series (return 1)) (series (return (call \u0026#39;\u0026#34;int.__add__[int,int]\u0026#34; (call \u0026#39;\u0026#34;fib[int]\u0026#34; (call \u0026#39;\u0026#34;int.__sub__[int,int]\u0026#34; \u0026#39;\u0026#34;n\u0026#34; 1)) (call \u0026#39;\u0026#34;fib[int]\u0026#34; (call \u0026#39;\u0026#34;int.__sub__[int,int]\u0026#34; \u0026#39;\u0026#34;n\u0026#34; 2)))))))) A few interesting points to consider:\nCIR is hierarchical like ASTS, but unlike ASTs it uses a vastly reduced set of nodes, making it much easier to work with and reason about. Operators are expressed as function calls. In fact, CIR has no explicit concept of +, -, etc. and instead expresses these via their corresponding magic methods (__add__, __sub__, etc.). CIR has no concept of generic types. By the time CIR is generated, all types need to have been resolved. Structure # CIR is comprised of a set of nodes, each with a specific semantic meaning. There are nodes for representing constants (e.g. 42), instructions (e.g. call) control flow (e.g. if), types (e.g. int) and so on.\nHere is a table showing the different types of nodes, LLVM IR equivalents, and some examples:\nNode LLVM equivalent Examples Node n/a all of the below Module Module n/a Type Type IntType, FuncType, RefType Var AllocaInst Var, Func Func Function BodiedFunc, ExternalFunc, LLVMFunc Value Value all of the below Const Constant IntConst, FloatConst, StringConst Instr Instruction CallInstr, TernaryInstr, ThrowInstr Flow n/a IfFlow, WhileFlow, ForFlow Uses # CIR provides a framework for doing program optimizations, analyses and transformations. These operations are collectively known as IR passes.\nA number of built-in passes and other functionalities are provided by CIR. These can be used as building blocks to create new passes. Examples include:\nControl-flow graph creation Reaching definitions Dominator analysis Side effect analysis Constant propagation and folding Canonicalization Inlining and outlining Python-specific optimizations targeting several common Python idioms We\u0026rsquo;re regularly adding new standard passes, so this list is always growing.\nAn example # Let\u0026rsquo;s look at a real example. Imagine we want to write a pass that transforms expressions of the form \u0026lt;int const\u0026gt; + \u0026lt;int const\u0026gt; into a single \u0026lt;int const\u0026gt; denoting the result. In other words, a simple form of constant folding that only looks at addition on integers. The resulting pass would like this:\n#include \u0026#34;codon/cir/transform/pass.h\u0026#34; using namespace codon::ir; class MyAddFolder : public transform::OperatorPass { public: static const std::string KEY; std::string getKey() const override { return KEY; } void handle(CallInstr *v) override { auto *f = util::getFunc(v-\u0026gt;getCallee()); if (!f || f-\u0026gt;getUnmangledName() != \u0026#34;__add__\u0026#34; || v-\u0026gt;numArgs() != 2) return; auto *lhs = cast\u0026lt;IntConst\u0026gt;(v-\u0026gt;front()); auto *rhs = cast\u0026lt;IntConst\u0026gt;(v-\u0026gt;back()); if (lhs \u0026amp;\u0026amp; rhs) { auto sum = lhs-\u0026gt;getVal() + rhs-\u0026gt;getVal(); v-\u0026gt;replaceAll(v-\u0026gt;getModule()-\u0026gt;getInt(sum)); } } }; const std::string MyAddFolder::KEY = \u0026#34;my-add-folder\u0026#34;; So how does this actually work, and what do the different components mean? Here are some notable points:\nMost passes can inherit from transform::OperatorPass. OperatorPass is a combination of an Operator and a Pass. An Operator is a utility visitor that provides hooks for handling all the different node types (i.e. through the handle() methods). Pass is the base class representing a generic pass, which simply provides a run() method that takes a module. Because of this, MyAddFolder::handle(CallInstr *) will be called on every call instruction in the module. Within our handle(), we first check to see if the function being called is __add__, indicating addition (in practice there would be a more specific check to make sure this is the __add__), and if so we extract the first and second arguments. We cast these arguments to IntConst. If the results are non-null, then both arguments were in fact integer constants, meaning we can replace the original call instruction with a new constant that represents the result of the addition. In CIR, all nodes are \u0026ldquo;replaceable\u0026rdquo; via a replaceAll() method. Lastly, notice that all passes have a KEY field to uniquely identify them. Bidirectionality # An important and often very useful feature of CIR is that it is bidirectional, meaning it\u0026rsquo;s possible to return to the type checking stage to generate new IR nodes that were not initially present in the module. For example, imagine that your pass needs to use a List with some new element type; that list\u0026rsquo;s methods need to be instantiated by the type checker for use in CIR. In practice this bidirectionality often lets you write large parts of your optimization or transformation in Codon, and pull out the necessary functions or types as needed in the pass.\nCIR\u0026rsquo;s Module class has three methods to enable this feature:\n/// Gets or realizes a function. /// @param funcName the function name /// @param args the argument types /// @param generics the generics /// @param module the module of the function /// @return the function or nullptr Func *getOrRealizeFunc(const std::string \u0026amp;funcName, std::vector\u0026lt;types::Type *\u0026gt; args, std::vector\u0026lt;types::Generic\u0026gt; generics = {}, const std::string \u0026amp;module = \u0026#34;\u0026#34;); /// Gets or realizes a method. /// @param parent the parent class /// @param methodName the method name /// @param rType the return type /// @param args the argument types /// @param generics the generics /// @return the method or nullptr Func *getOrRealizeMethod(types::Type *parent, const std::string \u0026amp;methodName, std::vector\u0026lt;types::Type *\u0026gt; args, std::vector\u0026lt;types::Generic\u0026gt; generics = {}); /// Gets or realizes a type. /// @param typeName the type name /// @param generics the generics /// @param module the module of the type /// @return the function or nullptr types::Type *getOrRealizeType(const std::string \u0026amp;typeName, std::vector\u0026lt;types::Generic\u0026gt; generics = {}, const std::string \u0026amp;module = \u0026#34;\u0026#34;); Let\u0026rsquo;s see bidirectionality in action. Consider the following Codon code:\ndef foo(x): return x*3 + x def validate(x, y): assert y == x*4 a = foo(10) b = foo(1.5) c = foo(\u0026#39;a\u0026#39;) Assume we want our pass to insert a call to validate() after each assignment that takes the assigned variable and the argument passed to foo(). We would do something like the following:\n#include \u0026#34;codon/cir/transform/pass.h\u0026#34; using namespace codon::ir; class ValidateFoo : public transform::OperatorPass { public: static const std::string KEY; std::string getKey() const override { return KEY; } void handle(AssignInstr *v) { auto *M = v-\u0026gt;getModule(); auto *var = v-\u0026gt;getLhs(); auto *call = cast\u0026lt;CallInstr\u0026gt;(v-\u0026gt;getRhs()); if (!call) return; auto *foo = util::getFunc(call-\u0026gt;getCallee()); if (!foo || foo-\u0026gt;getUnmangledName() != \u0026#34;foo\u0026#34;) return; auto *arg1 = call-\u0026gt;front(); // argument of \u0026#39;foo\u0026#39; call auto *arg2 = M-\u0026gt;Nr\u0026lt;VarValue\u0026gt;(var); // result of \u0026#39;foo\u0026#39; call auto *validate = M-\u0026gt;getOrRealizeFunc(\u0026#34;validate\u0026#34;, {arg1-\u0026gt;getType(), arg2-\u0026gt;getType()}); auto *validateCall = util::call(validate, {arg1, arg2}); insertAfter(validateCall); // call \u0026#39;validate\u0026#39; after \u0026#39;foo\u0026#39; } }; const std::string ValidateFoo::KEY = \u0026#34;validate-foo\u0026#34;; Note that insertAfter is a convenience method of Operator that inserts the given node \u0026ldquo;after\u0026rdquo; the node being visited (along with insertBefore which inserts before the node being visited).\nRunning this pass on the snippet above, we would get:\na = foo(10) validate(10, a) b = foo(1.5) validate(1.5, b) c = foo(\u0026#39;a\u0026#39;) validate(\u0026#39;a\u0026#39;, c) Notice that we used getOrRealizeFunc to create three different instances of validate: one for int arguments, one for float arguments and finally one for str arguments.\nExtending the IR # CIR is extensible, and it is possible to add new constants, instructions, flows and types. This can be done by subclassing the corresponding custom base class; to create a custom type, for example, you would subclass CustomType. Let\u0026rsquo;s look at an example where we extend CIR to add a 32-bit float type:\nusing namespace codon::ir; #include \u0026#34;codon/cir/dsl/nodes.h\u0026#34; #include \u0026#34;codon/cir/llvm/llvisitor.h\u0026#34; class Builder : public dsl::codegen::TypeBuilder { public: llvm::Type *buildType(LLVMVisitor *v) override { return v-\u0026gt;getBuilder()-\u0026gt;getFloatTy(); } llvm::DIType *buildDebugType(LLVMVisitor *v) override { auto *module = v-\u0026gt;getModule(); auto \u0026amp;layout = module-\u0026gt;getDataLayout(); auto \u0026amp;db = v-\u0026gt;getDebugInfo(); auto *t = buildType(v); return db.builder-\u0026gt;createBasicType( \u0026#34;float_32\u0026#34;, layout.getTypeAllocSizeInBits(t), llvm::dwarf::DW_ATE_float); } }; class Float32 : public dsl::CustomType { public: std::unique_ptr\u0026lt;TypeBuilder\u0026gt; getBuilder() const override { return std::make_unique\u0026lt;Builder\u0026gt;(); } }; Notice that, in order to specify how to generate code for our Float32 type, we create a TypeBuilder subclass with methods for building the corresponding LLVM IR type. There is also a ValueBuilder for new constants and converting them to LLVM IR, as well as a CFBuilder for new instructions and creating control-flow graphs out of them.\n{% hint style=\u0026ldquo;info\u0026rdquo; %} When subclassing nodes other than types (e.g. instructions, flows, etc.), be sure to use the AcceptorExtend CRTP class, as in class MyNewInstr : public AcceptorExtend\u0026lt;MyNewInstr, dsl::CustomInstr\u0026gt;. {% endhint %}\nUtilities # The codon/cir/util/ directory has a number of utility and generally helpful functions, for things like cloning IR, inlining/outlining, matching and more. codon/cir/util/irtools.h in particular has many helpful functions for performing various common tasks. If you\u0026rsquo;re working with CIR, be sure to take a look at these functions to make your life easier!\nStandard pass pipeline # These standard sets of passes are run in release-mode:\nPython-specific optimizations: a series of passes to optimize common Python patterns and idioms. Examples include dictionary updates of the form d[k] = d.get(k, x) \u0026lt;op\u0026gt; y, and optimizing them to do just one access into the dictionary, as well as optimizing repeated string concatenations or various I/O patterns.\nImperative for-loop lowering: loops of the form for i in range(a, b, c) (with c constant) are lowered to a special IR node, since these loops are important for e.g. multithreading later.\nA series of program analyses whose results are available to later passes:\nControl-flow analysis Reaching definition analysis Dominator analysis Capture (or escape) analysis Parallel loop lowering for multithreading or GPU\nConstant propagation and folding. This also includes dead code elimination and (in non-JIT mode) global variable demotion.\nCodon plugins can inject their own passes into the pipeline as well.\n"},{"id":7,"href":"/docs/advanced/parallel/","title":"Parallel","section":"Docs","content":"Codon supports parallelism and multithreading via OpenMP out of the box. Here's an example:\n@par for i in range(10): import threading as thr print(\u0026#39;hello from thread\u0026#39;, thr.get_ident()) By default, parallel loops will use all available threads, or use the number of threads specified by the OMP_NUM_THREADS environment variable. A specific thread number can be given directly on the @par line as well:\n@par(num_threads=5) for i in range(10): import threading as thr print(\u0026#39;hello from thread\u0026#39;, thr.get_ident()) @par supports several OpenMP parameters, including:\nnum_threads (int): the number of threads to use when running the loop schedule (str): either static, dynamic, guided, auto or runtime chunk_size (int): chunk size when partitioning loop iterations ordered (bool): whether the loop iterations should be executed in the same order collapse (int): number of loop nests to collapse into a single iteration space Other OpenMP parameters like private, shared or reduction, are inferred automatically by the compiler. For example, the following loop\na = 0 @par for i in range(N): a += foo(i) will automatically generate a reduction for variable a.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Modifying shared objects like lists or dictionaries within a parallel section needs to be done with a lock or critical section. See below for more details. {% endhint %}\nHere is an example that finds the number of primes up to a user-defined limit, using a parallel loop on 16 threads with a dynamic schedule and chunk size of 100:\nfrom sys import argv def is_prime(n): factors = 0 for i in range(2, n): if n % i == 0: factors += 1 return factors == 0 limit = int(argv[1]) total = 0 @par(schedule=\u0026#39;dynamic\u0026#39;, chunk_size=100, num_threads=16) for i in range(2, limit): if is_prime(i): total += 1 print(total) Static schedules work best when each loop iteration takes roughly the same amount of time, whereas dynamic schedules are superior when each iteration varies in duration. Since counting the factors of an integer takes more time for larger integers, we use a dynamic schedule here.\n@par also supports C/C++ OpenMP pragma strings. For example, the @par line in the above example can also be written as:\n# same as: @par(schedule=\u0026#39;dynamic\u0026#39;, chunk_size=100, num_threads=16) @par(\u0026#39;schedule(dynamic, 100) num_threads(16)\u0026#39;) Different kinds of loops # for-loops can iterate over arbitrary generators, but OpenMP's parallel loop construct only applies to imperative for-loops of the form for i in range(a, b, c) (where c is constant). For general parallel for-loops of the form for i in some_generator(), a task-based approach is used instead, where each loop iteration is executed as an independent task.\nThe Codon compiler also converts iterations over lists (for a in some_list) to imperative for-loops, meaning these loops can be executed using OpenMP's loop parallelism.\nCustom reductions # Codon can automatically generate efficient reductions for int and float values. For other data types, user-defined reductions can be specified. A class that supports reductions must include:\nA default constructor that represents the zero value An __add__ method (assuming + is used as the reduction operator) Here is an example for reducing a new Vector type:\n@tuple class Vector: x: int y: int def __new__(): return Vector(0, 0) def __add__(self, other: Vector): return Vector(self.x + other.x, self.y + other.y) v = Vector() @par for i in range(100): v += Vector(i,i) print(v) # (x: 4950, y: 4950) OpenMP constructs # All of OpenMP's API functions are accessible directly in Codon. For example:\nimport openmp as omp print(omp.get_num_threads()) omp.set_num_threads(32) OpenMP's critical, master, single and ordered constructs can be applied via the corresponding decorators:\nimport openmp as omp @omp.critical def only_run_by_one_thread_at_a_time(): print(\u0026#39;critical!\u0026#39;, omp.get_thread_num()) @omp.master def only_run_by_master_thread(): print(\u0026#39;master!\u0026#39;, omp.get_thread_num()) @omp.single def only_run_by_single_thread(): print(\u0026#39;single!\u0026#39;, omp.get_thread_num()) @omp.ordered def run_ordered_by_iteration(i): print(\u0026#39;ordered!\u0026#39;, i) @par(ordered=True) for i in range(100): only_run_by_one_thread_at_a_time() only_run_by_master_thread() only_run_by_single_thread() run_ordered_by_iteration(i) For finer-grained locking, consider using the locks from the threading module:\nfrom threading import Lock lock = Lock() # or RLock for reentrant lock @par for i in range(100): with lock: print(\u0026#39;only one thread at a time allowed here\u0026#39;) "},{"id":8,"href":"/docs/advanced/pipelines/","title":"Pipelines","section":"Docs","content":"Codon extends the core Python language with a pipe operator. You can chain multiple functions and generators to form a pipeline. Pipeline stages can be regular functions or generators. In the case of standard functions, the function is simply applied to the input data and the result is carried to the remainder of the pipeline, akin to F#'s functional piping. If, on the other hand, a stage is a generator, the values yielded by the generator are passed lazily to the remainder of the pipeline, which in many ways mirrors how piping is implemented in Bash. Note that Codon ensures that generator pipelines do not collect any data unless explicitly requested, thus allowing the processing of terabytes of data in a streaming fashion with no memory and minimal CPU overhead.\ndef add1(x): return x + 1 2 |\u0026gt; add1 # 3; equivalent to add1(2) def calc(x, y): return x + y**2 2 |\u0026gt; calc(3) # 11; equivalent to calc(2, 3) 2 |\u0026gt; calc(..., 3) # 11; equivalent to calc(2, 3) 2 |\u0026gt; calc(3, ...) # 7; equivalent to calc(3, 2) def gen(i): for i in range(i): yield i 5 |\u0026gt; gen |\u0026gt; print # prints 0 1 2 3 4 separated by newline range(1, 4) |\u0026gt; iter |\u0026gt; gen |\u0026gt; print(end=\u0026#39; \u0026#39;) # prints 0 0 1 0 1 2 without newline [1, 2, 3] |\u0026gt; print # prints [1, 2, 3] range(100000000) |\u0026gt; print # prints range(0, 100000000) range(100000000) |\u0026gt; iter |\u0026gt; print # not only prints all those numbers, but it uses almost no memory at all Codon will chain anything that implements __iter__, and the compiler will optimize out generators whenever possible. Combinations of pipes and generators can be used to implement efficient streaming pipelines.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} The Codon compiler may perform optimizations that change the order of elements passed through a pipeline. Therefore, it is best to not rely on order when using pipelines. If order needs to be maintained, consider using a regular loop or passing an index alongside each element sent through the pipeline. {% endhint %}\nParallel pipelines # CPython and many other implementations alike cannot take advantage of parallelism due to the infamous global interpreter lock, a mutex that prevents multiple threads from executing Python bytecode at once. Unlike CPython, Codon has no such restriction and supports full multithreading. To this end, Codon supports a parallel pipe operator ||\u0026gt;, which is semantically similar to the standard pipe operator except that it allows the elements sent through it to be processed in parallel by the remainder of the pipeline. Hence, turning a serial program into a parallel one often requires the addition of just a single character in Codon. Further, a single pipeline can contain multiple parallel pipes, resulting in nested parallelism.\nrange(100000) |\u0026gt; iter ||\u0026gt; print # prints all these numbers, probably in random order range(100000) |\u0026gt; iter ||\u0026gt; process ||\u0026gt; clean # runs process in parallel, and then cleans data in parallel Codon will automatically schedule the process and clean functions to execute as soon as possible. You can control the number of threads via the OMP_NUM_THREADS environment variable.\nInternally, the Codon compiler uses an OpenMP task backend to generate code for parallel pipelines. Logically, parallel pipe operators are similar to parallel-for loops: the portion of the pipeline after the parallel pipe is outlined into a new function that is called by the OpenMP runtime task spawning routines (as in #pragma omp task in C++), and a synchronization point (#pragma omp taskwait) is added after the outlined segment.\n"},{"id":9,"href":"/docs/interop/cpp/","title":"Cpp","section":"Docs","content":"Calling C/C++ from Codon is quite easy with from C import, but Codon can also be called from C/C++ code. To make a Codon function externally visible, simply annotate it with @export:\n@export def foo(n: int): for i in range(n): print(i * i) return n * n Note that only top-level, non-generic functions can be exported. Now we can create a shared library containing foo (assuming source file foo.codon):\ncodon build --relocation-model=pic --lib -o libfoo.so foo.codon Now we can call foo from a C program (if you\u0026rsquo;re using C++, mark the Codon function as extern \u0026quot;C\u0026quot;):\n#include \u0026lt;stdint.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; int64_t foo(int64_t); // In C++, it would be: // extern \u0026#34;C\u0026#34; int64_t foo(int64_t); int main() { printf(\u0026#34;%llu\\n\u0026#34;, foo(10)); } Compile:\ngcc -o foo -L. -lfoo foo.c # or g++ if using C++ Now running ./foo should invoke foo() as defined in Codon, with an argument of 10.\nNote that if the generated shared library is in a non-standard path, you can either:\nAdd the rpath to the gcc command: -Wl,-rpath=/path/to/lib/dir Add the library path to LD_LIBRARY_PATH (or DYLD_LIBRARY_PATH if using macOS): export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/lib/dir. Converting types # The following table shows the conversions between Codon and C/C++ types:\nCodon C/C++ int long or int64_t float double bool bool byte char or int8_t str {int64_t, char*} (length and data) tuple Struct of fields class Pointer to corresponding tuple "},{"id":10,"href":"/docs/interop/decorator/","title":"Decorator","section":"Docs","content":"Codon includes a Python package called codon that allows functions or methods within Python codebases to be compiled and executed by Codon\u0026rsquo;s JIT. The codon library can be installed with pip:\npip install codon-jit This library will attempt to use an installed version of Codon. If Codon is installed at a non-standard path, set the CODON_DIR environment variable to the installation path.\nUsing @codon.jit # The @codon.jit decorator causes the annotated function to be compiled by Codon, and automatically converts standard Python objects to native Codon objects. For example:\nimport codon from time import time def is_prime_python(n): if n \u0026lt;= 1: return False for i in range(2, n): if n % i == 0: return False return True @codon.jit def is_prime_codon(n): if n \u0026lt;= 1: return False for i in range(2, n): if n % i == 0: return False return True t0 = time() ans = sum(1 for i in range(100000, 200000) if is_prime_python(i)) t1 = time() print(f\u0026#39;[python] {ans} | took {t1 - t0} seconds\u0026#39;) t0 = time() ans = sum(1 for i in range(100000, 200000) if is_prime_codon(i)) t1 = time() print(f\u0026#39;[codon] {ans} | took {t1 - t0} seconds\u0026#39;) outputs:\n[python] 8392 | took 39.6610209941864 seconds [codon] 8392 | took 0.998633861541748 seconds {% hint style=\u0026ldquo;info\u0026rdquo; %} @par (to parallelize for-loops) can be used in annotated functions via a leading underscore: _@par. {% endhint %}\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Changes made to objects in a JIT\u0026rsquo;d function will not be reflected in the host Python application, since objects passed to Codon are converted to Codon-native types. If objects need to be modified, consider returning any necessary values and performing modifications in Python. {% endhint %}\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Polymorphism and inheritance are not yet supported in JIT mode. {% endhint %}\nType conversions # @codon.jit will attempt to convert any Python types that it can to native Codon types. The current conversion rules are as follows:\nBasic types like int, float, bool, str and complex are converted to the same type in Codon.\nTuples are converted to Codon tuples (which are then compiled down to the equivalent of C structs).\nCollection types like list, dict and set are converted to the corresponding Codon collection type, with the restriction that all elements in the collection must have the same type.\nOther types are passed to Codon directly as Python objects. Codon will then use its Python object API (\u0026quot;pyobj\u0026quot;) to handle and operate on these objects. Internally, this consists of calling the appropriate CPython C API functions, e.g. PyNumber_Add(a, b) for a + b.\nCustom types # User-defined classes can be converted to Codon classes via @codon.convert:\nimport codon @codon.convert class Foo: __slots__ = \u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39; def __init__(self, n): self.a = n self.b = n**2 self.c = n**3 @codon.jit def total(self): return self.a + self.b + self.c print(Foo(10).total()) # 1110 @codon.convert requires the annotated class to specify __slots__, which it uses to construct a generic Codon class (specifically, a named tuple) to store the class\u0026rsquo;s converted fields.\nPassing globals to Codon # Global variables, functions or modules can be passed to JIT\u0026rsquo;d functions through the pyvars argument to @codon.jit:\nimport codon def foo(n): print(f\u0026#39;n is {n}\u0026#39;) @codon.jit(pyvars=[\u0026#39;foo\u0026#39;]) def bar(n): foo(n) # calls the Python function \u0026#39;foo\u0026#39; return n ** 2 print(bar(9)) # \u0026#39;n is 9\u0026#39; then \u0026#39;81\u0026#39; This also allows imported Python modules to be accessed by Codon. All pyvars are passed as Python objects. Note that JIT\u0026rsquo;d functions can call each other by default.\n{% hint style=\u0026ldquo;info\u0026rdquo; %} pyvars takes in variable names as strings, not the variables themselves. {% endhint %}\nDebugging # @codon.jit takes an optional debug parameter that can be used to print debug information such as generated Codon functions and data types:\nimport codon @codon.jit(debug=True) def sum_of_squares(v): return sum(i**2 for i in v) print(sum_of_squares([1.4, 2.9, 3.14])) outputs:\n[codon::jit::execute] code: def sum_of_squares(v): return sum(i**2 for i in v) ----- [python] sum_of_squares([\u0026#39;List[float]\u0026#39;]) [codon::jit::executePython] wrapper: @export def __codon_wrapped__sum_of_squares_0(args: cobj) -\u0026gt; cobj: a0 = List[float].__from_py__(PyTuple_GetItem(args, 0)) return sum_of_squares(a0).__to_py__() ----- 20.229599999999998 Internals and performance tips # Under the hood, the codon module maintains an instance of the Codon JIT, which it uses to dynamically compile annotated Python functions. These functions are then wrapped in another generated function that performs the type conversions. The JIT maintains a cache of native function pointers corresponding to annotated Python functions with concrete input types. Hence, calling a JIT\u0026rsquo;d function multiple times does not repeatedly invoke the entire Codon compiler pipeline, but instead reuses the cached function pointer.\nAlthough object conversions from Python to Codon are generally cheap, they do impose a small overhead, meaning @codon.jit will work best on expensive and/or long-running operations rather than short-lived operations. By the same token, the more work can be done in Codon, the better, as opposed to repeatedly transferring back and forth.\n"},{"id":11,"href":"/docs/interop/jupyter/","title":"Jupyter","section":"Docs","content":"Codon ships with a kernel that can be used by Jupyter, invoked with the codon jupyter ... subcommand.\nTo add the Codon kernel, add the following kernel.json file to the directory /path/to/jupyter/kernels/codon/:\n{ \u0026#34;display_name\u0026#34;: \u0026#34;Codon\u0026#34;, \u0026#34;argv\u0026#34;: [ \u0026#34;/path/to/codon\u0026#34;, \u0026#34;jupyter\u0026#34;, \u0026#34;{connection_file}\u0026#34; ], \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34; } Plugins can also optionally be specified, as in:\n{ \u0026#34;display_name\u0026#34;: \u0026#34;Codon\u0026#34;, \u0026#34;argv\u0026#34;: [ \u0026#34;/path/to/codon\u0026#34;, \u0026#34;jupyter\u0026#34;, \u0026#34;-plugin\u0026#34;, \u0026#34;/path/to/plugin\u0026#34;, \u0026#34;{connection_file}\u0026#34; ], \u0026#34;language\u0026#34;: \u0026#34;python\u0026#34; } "},{"id":12,"href":"/docs/interop/numpy/","title":"Numpy","section":"Docs","content":"Codon ships with a feature-complete, fully-compiled native NumPy implementation. It uses the same API as NumPy, but re-implements everything in Codon itself, allowing for a range of optimizations and performance improvements. Codon-NumPy works with Codon\u0026rsquo;s Python interoperability (you can transfer arrays to and from regular Python seamlessly), parallel backend (you can do array operations in parallel), and GPU backend (you can transfer arrays to and from the GPU seamlessly, and operate on them on the GPU).\nGetting started # Importing numpy in Codon will use Codon-NumPy (as opposed to from python import numpy, which would use standard NumPy):\nimport numpy as np We can then create and manipulate arrays just like in standard NumPy:\nx = np.arange(15, dtype=np.int64).reshape(3, 5) print(x) # 0 1 2 3 4 # 5 6 7 8 9 # 10 11 12 13 14 x[1:, ::2] = -99 # 0 1 2 3 4 # -99 6 -99 8 -99 # -99 11 -99 13 -99 y = x.max(axis=1) print(y) # 4 8 13 In Codon-NumPy, any Codon type can be used as the array type. The numpy module has the same aliases that regular NumPy has, like np.int64, np.float32 etc., but these simply refer to the regular Codon types.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Using a string (e.g. \u0026quot;i4\u0026quot; or \u0026quot;f8\u0026quot;) for the dtype is not yet supported. {% endhint %}\nCodon array type # The Codon array type is parameterized by the array data type (\u0026quot;dtype\u0026quot;) and the array dimension (\u0026quot;ndim\u0026quot;). That means that, in Codon-NumPy, the array dimension is a property of the type, so a 1-d array is a different type than a 2-d array and so on:\nimport numpy as np arr = np.array([[1.1, 2.2], [3.3, 4.4]]) print(arr.__class__.__name__) # ndarray[float,2] arr = np.arange(10) print(arr.__class__.__name__) # ndarray[int,1] The array dimension must also be known at compile-time. This allows the compiler to perform a wider range of optimizations on array operations. Usually, this has no impact on the code as the NumPy functions can determine input and output dimensions automatically. However, the dimension (and dtype) must be given when, for instance, reading arrays from disk:\n# \u0026#39;dtype\u0026#39; argument specifies array type # \u0026#39;ndim\u0026#39; argument specifies array dimension arr = np.load(\u0026#39;arr.npy\u0026#39;, dtype=float, ndim=3) A very limited number of NumPy functions return an array whose dimension cannot be deduced from its inputs. One such example is squeeze(), which removes axes of length 1; since the number of axes of length 1 is not determinable at compile-time, this function requires an extra argument that indicates which axes to remove.\nPython interoperability # Codon\u0026rsquo;s ndarray type supports Codon\u0026rsquo;s standard Python interoperability API (i.e. __to_py__ and __from_py__ methods), so arrays can be transferred to and from Python seamlessly.\nPyTorch integration # Because PyTorch tensors and NumPy arrays are interchangeable without copying data, it is easy to use Codon to efficiently manipulate or operate on PyTorch tensors. This can be achieved either via Codon\u0026rsquo;s just-in-time (JIT) compilation mode or via its Python extension mode.\nUsing Codon JIT # Here is an example showing initializing a $$128 \\times 128 \\times 128$$ tensor $$A$$ such that $$A_{i,j,k} = i + j + k$$:\nimport numpy as np import time import codon import torch @codon.jit def initialize(arr): for i in range(128): for j in range(128): for k in range(128): arr[i, j, k] = i + j + k # first call JIT-compiles; subsequent calls use cached JIT\u0026#39;d code tensor = torch.empty(128, 128, 128) initialize(tensor.numpy()) tensor = torch.empty(128, 128, 128) t0 = time.time() initialize(tensor.numpy()) t1 = time.time() print(tensor) print(t1 - t0, \u0026#39;seconds\u0026#39;) Timings on an M1 MacBook Pro:\nWithout @codon.jit: 0.1645 seconds With @codon.jit: 0.001485 seconds (110x speedup) For more information, see the Codon JIT docs.\nUsing Codon Python extensions # Codon can compile directly to a Python extension module, similar to writing a C extension for CPython or using Cython.\nTaking the same example, we can create a file init.py:\nimport numpy as np import numpy.pybridge def initialize(arr: np.ndarray[np.float32, 3]): for i in range(128): for j in range(128): for k in range(128): arr[i, j, k] = i + j + k Note that extension module functions need to specify argument types. In this case, the argument is a 3-dimensional array of type float32, which is expressed as np.ndarray[np.float32, 3] in Codon.\nNow we can use a setup script setup.py to create the extension module as described in the Codon Python extension docs:\npython3 setup.py build_ext --inplace # setup.py from docs linked above Finally, we can call the function from Python:\nfrom codon_initialize import initialize import torch tensor = torch.empty(128, 128, 128) initialize(tensor.numpy()) print(tensor) Note that there is no compilation happening at runtime with this approach. Instead, everything is compiled ahead of time when creating the extension. The timing is the same as the first approach.\nYou can also use any Codon compilation flags with this approach by adding them to the spawn call in the setup script. For example, you can use the -disable-exceptions flag to disable runtime exceptions, which can yield performance improvements and generate more streamlined code.\nParallel processing # Unlike Python, Codon has no global interpreter lock (\u0026ldquo;GIL\u0026rdquo;) and supports full multithreading, meaning NumPy code can be parallelized. For example:\nimport numpy as np import numpy.random as rnd import time N = 100000000 n = 10 rng = rnd.default_rng(seed=0) x = rng.normal(size=(N,n)) y = np.empty(n) t0 = time.time() @par(num_threads=n) for i in range(n): y[i] = x[:,i].sum() t1 = time.time() print(y) print(t1 - t0, \u0026#39;seconds\u0026#39;) # no par - 1.4s # w/ par - 0.4s GPU processing # Codon-NumPy supports seamless GPU processing: arrays can be passed to and from the GPU, and array operations can be performed on the GPU using Codon\u0026rsquo;s GPU backend. Here\u0026rsquo;s an example that computes the Mandelbrot set:\nimport numpy as np import gpu MAX = 1000 # maximum Mandelbrot iterations N = 4096 # width and height of image pixels = np.empty((N, N), int) def scale(x, a, b): return a + (x/N)*(b - a) @gpu.kernel def mandelbrot(pixels): i = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x j = (gpu.block.y * gpu.block.dim.y) + gpu.thread.y c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12)) z = 0j iteration = 0 while abs(z) \u0026lt;= 2 and iteration \u0026lt; MAX: z = z**2 + c iteration += 1 pixels[i, j] = 255 * iteration/MAX mandelbrot(pixels, grid=(N//32, N//32), block=(32, 32)) Here is the same code using GPU-parallelized for-loops:\nimport numpy as np import gpu MAX = 1000 # maximum Mandelbrot iterations N = 4096 # width and height of image pixels = np.empty((N, N), int) def scale(x, a, b): return a + (x/N)*(b - a) @par(gpu=True, collapse=2) # \u0026lt;-- for i in range(N): for j in range(N): c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12)) z = 0j iteration = 0 while abs(z) \u0026lt;= 2 and iteration \u0026lt; MAX: z = z**2 + c iteration += 1 pixels[i, j] = 255 * iteration/MAX Linear algebra # Codon-NumPy fully supports the NumPy linear algebra module which provides a comprehensive set of functions for linear algebra operations. Importing the linear algebra module, just like in standard NumPy:\nimport numpy.linalg as LA For example, the eig() function computes the eigenvalues and eigenvectors of a square matrix:\neigenvalues, eigenvectors = LA.eig(np.diag((1, 2, 3))) print(eigenvalues) # 1.+0.j 2.+0.j 3.+0.j print(eigenvectors) # [[1.+0.j 0.+0.j 0.+0.j] # [0.+0.j 1.+0.j 0.+0.j] # [0.+0.j 0.+0.j 1.+0.j]] Just like standard NumPy, Codon will use an optimized BLAS library under the hood to implement many linear algebra operations. This defaults to OpenBLAS on Linux and Apple\u0026rsquo;s Accelerate framework on macOS.\nBecause Codon supports full multithreading, it\u0026rsquo;s possible to use outer-loop parallelism to perform linear algebra operations in parallel. Here\u0026rsquo;s an example that multiplies several matrices in parallel:\nimport numpy as np import numpy.random as rnd import time N = 5000 n = 10 rng = rnd.default_rng(seed=0) a = rng.normal(size=(n, N, N)) b = rng.normal(size=(n, N, N)) y = np.empty((n, N, N)) t0 = time.time() @par(num_threads=n) for i in range(n): y[i, :, :] = a[i, :, :] @ b[i, :, :] t1 = time.time() print(y.sum()) print(t1 - t0, \u0026#39;seconds\u0026#39;) # Python - 53s # Codon - 6s {% hint style=\u0026ldquo;warning\u0026rdquo; %} When using Codon\u0026rsquo;s outer-loop parallelism, make sure to set the environment variable OPENBLAS_NUM_THREADS to 1 (i.e. export OPENBLAS_NUM_THREADS=1) to avoid conflicts with OpenBLAS multithreading. {% endhint %}\nNumPy-specific compiler optimizations # Codon includes compiler passes that optimize NumPy code through methods like operator fusion, which combine distinct operations so that they can be executed during a single pass through the argument arrays, saving both execution time and memory (since intermediate arrays no longer need to be allocated).\nTo showcase this, here\u0026rsquo;s a simple NumPy program that approximates $$\\pi$$. The code below generates two random vectors $$x$$ and $$y$$ with entries in the range $$[0, 1)$$ and computes the fraction of pairs of points that lie in the circle of radius $$0.5$$ centered at $$(0.5, 0.5)$$, which is approximately $$\\pi \\over 4$$.\nimport time import numpy as np rng = np.random.default_rng(seed=0) x = rng.random(500_000_000) y = rng.random(500_000_000) t0 = time.time() # pi ~= 4 x (fraction of points in circle) pi = ((x-1)**2 + (y-1)**2 \u0026lt; 1).sum() * (4 / len(x)) t1 = time.time() print(pi) print(t1 - t0, \u0026#39;seconds\u0026#39;) The expression (x-1)**2 + (y-1)**2 \u0026lt; 1 gets fused by Codon so that it is executed in just a single pass over the x and y arrays, rather than in multiple passes for each sub-expression x-1, y-1 etc. as is the case with standard NumPy.\nHere are the resulting timings on an M1 MacBook Pro:\nPython / standard NumPy: 2.4 seconds Codon: 0.42 seconds (6x speedup) You can display information about fused expressions by using the -npfuse-verbose flag of codon, as in codon run -release -npfuse-verbose pi.py. Here\u0026rsquo;s the output for the program above:\nOptimizing expression at pi.py:10:7 lt \u0026lt;array[bool, 1]\u0026gt; [cost=6] add \u0026lt;array[f64, 1]\u0026gt; [cost=5] pow \u0026lt;array[f64, 1]\u0026gt; [cost=2] sub \u0026lt;array[f64, 1]\u0026gt; [cost=1] a0 \u0026lt;array[f64, 1]\u0026gt; a1 \u0026lt;i64\u0026gt; a2 \u0026lt;i64\u0026gt; pow \u0026lt;array[f64, 1]\u0026gt; [cost=2] sub \u0026lt;array[f64, 1]\u0026gt; [cost=1] a3 \u0026lt;array[f64, 1]\u0026gt; a4 \u0026lt;i64\u0026gt; a5 \u0026lt;i64\u0026gt; a6 \u0026lt;i64\u0026gt; -\u0026gt; static fuse: lt \u0026lt;array[bool, 1]\u0026gt; [cost=6] add \u0026lt;array[f64, 1]\u0026gt; [cost=5] pow \u0026lt;array[f64, 1]\u0026gt; [cost=2] sub \u0026lt;array[f64, 1]\u0026gt; [cost=1] a0 \u0026lt;array[f64, 1]\u0026gt; a1 \u0026lt;i64\u0026gt; a2 \u0026lt;i64\u0026gt; pow \u0026lt;array[f64, 1]\u0026gt; [cost=2] sub \u0026lt;array[f64, 1]\u0026gt; [cost=1] a3 \u0026lt;array[f64, 1]\u0026gt; a4 \u0026lt;i64\u0026gt; a5 \u0026lt;i64\u0026gt; a6 \u0026lt;i64\u0026gt; As shown, the optimization pass employs a cost model to decide how to best handle a given expression, be it by fusing or evaluating sequentially. You can adjust the fusion cost thresholds via the following flags:\n-npfuse-always \u0026lt;cost1\u0026gt;: Expression cost below which to always fuse a given expression (default: 10). -npfuse-never \u0026lt;cost2\u0026gt;: Expression cost above which (\u0026gt;) to never fuse a given expression (default: 50). Given an expression cost C, the logic implemented in the pass is to:\nAlways fuse expressions where C \u0026lt;= cost1. Fuse expressions where cost1 \u0026lt; C \u0026lt;= cost2 if there is no broadcasting involved. Never fuse expressions where C \u0026gt; cost2 and instead evaluate them sequentially. This logic is applied recursively to a given expression to determine the optimal evaluation strategy.\nYou can disable these optimizations altogether by disabling the corresponding compiler pass via the flag -disable-opt core-numpy-fusion.\nI/O # Codon-NumPy supports most of NumPy\u0026rsquo;s I/O API. One important difference, however, is that I/O functions must specify the dtype and dimension of arrays being read, since Codon-NumPy array types are parameterized by dtype and dimension:\nimport numpy as np a = np.arange(27, dtype=np.int16).reshape(3, 3, 3) np.save(\u0026#39;arr.npy\u0026#39;, a) # Notice the \u0026#39;dtype\u0026#39; and \u0026#39;ndim\u0026#39; arguments: b = np.load(\u0026#39;arr.npy\u0026#39;, dtype=np.int16, ndim=3) Writing arrays has no such requirement.\nDatetimes # Codon-NumPy fully supports NumPy\u0026rsquo;s datetime types: datetime64 and timedelta64. One difference from standard NumPy is how these types are specified. Here\u0026rsquo;s an example:\n# datetime64 type with units of \u0026#34;1 day\u0026#34; # same as \u0026#34;dtype=\u0026#39;datetime64[D]\u0026#39;\u0026#34; in standard NumPy dt = np.array([\u0026#39;2020-01-02\u0026#39;, \u0026#39;2021-09-15\u0026#39;, \u0026#39;2022-07-01\u0026#39;], dtype=np.datetime64[\u0026#39;D\u0026#39;, 1]) # timedelta64 type with units of \u0026#34;15 minutes\u0026#34; # same as \u0026#34;dtype=\u0026#39;timedelta64[15m]\u0026#39;\u0026#34; in standard NumPy td = np.array([100, 200, 300], dtype=np.timedelta64[\u0026#39;m\u0026#39;, 15]) Passing array data to C/C++ # You can pass an ndarray\u0026rsquo;s underlying data pointer to a C/C++ function by using the data attribute of the array. For example:\nfrom C import foo(p: Ptr[float], n: int) arr = np.ndarray([1.0, 2.0, 3.0]) foo(arr.data, arr.size) Of course, it\u0026rsquo;s the caller\u0026rsquo;s responsibility to make sure the array is contiguous as needed and/or pass additional shape or stride information. See the C interoperability docs for more information.\nArray ABI # The ndarray[dtype, ndim] data structure has three fields, in the following order:\nshape: length-ndim tuple of non-negative 64-bit integers representing the array shape strides: length-ndim tuple of 64-bit integers representing the stride in bytes along each axis of the array data: pointer of type dtype to the array\u0026rsquo;s data For example, ndarray[np.float32, 3] would correspond to the following C structure:\nstruct ndarray_float32_3 { int64_t shape[3]; int64_t strides[3]; float *data; }; This can be used to pass an entire ndarray object to a C function without breaking it up into its constituent components.\nPerformance tips # Array layouts # As with standard NumPy, Codon-NumPy performs best when array data is contiguous in memory, ideally in row-major order (also called \u0026ldquo;C order\u0026rdquo;). Most NumPy functions will return C-order arrays, but operations like slicing and transposing arrays can alter contiguity. You can use numpy.ascontiguousarray() to create a contiguous array from an arbitrary array.\nLinux huge pages # When working with large arrays on Linux, enabling transparent hugepages can result in significant performance improvements.\nYou can check if transparent hugepages are enabled via\ncat /sys/kernel/mm/transparent_hugepage/enabled and you can enable them via\necho \u0026#34;always\u0026#34; | sudo tee /sys/kernel/mm/transparent_hugepage/enabled Disabling exceptions # By default, Codon performs various validation checks at runtime (e.g. bounds checks when indexing an array) just like standard NumPy, and raises an exception if they fail. If you know your program will not raise or catch any exceptions, you can disable these checks through the -disable-exceptions compiler flag.\nNote that when using this flag, raising an exception will terminate the process with a SIGTRAP.\nFast-math # You can enable \u0026ldquo;fast-math\u0026rdquo; optimizations via the -fast-math compiler flag. It is advisable to use this flag with caution as it changes floating point semantics and makes assumptions regarding inf and nan values. For more information, consult LLVM\u0026rsquo;s documentation on fast-math flags.\nNot-yet-supported # The following features of NumPy are not yet supported, but are planned for the future:\nString operations Masked arrays Polynomials A few miscellaneous Python-specific functions like get_include() are also not supported, as they are not applicable in Codon.\n"},{"id":13,"href":"/docs/interop/pyext/","title":"Pyext","section":"Docs","content":"Codon includes a build mode called pyext for generating Python extensions (which are traditionally written in C, C++ or Cython):\ncodon build -pyext extension.codon # add -release to enable optimizations codon build -pyext accepts the following options:\n-o \u0026lt;output object\u0026gt;: Writes the compilation result to the specified file. -module \u0026lt;module name\u0026gt;: Specifies the generated Python module\u0026rsquo;s name. {% hint style=\u0026ldquo;warning\u0026rdquo; %} It is recommended to use the pyext build mode with Python versions 3.9 and up. {% endhint %}\nFunctions # Extension functions written in Codon should generally be fully typed:\ndef foo(a: int, b: float, c: str): # return type will be deduced return a * b + float(c) The pyext build mode will automatically generate all the necessary wrappers and hooks for converting a function written in Codon into a function that\u0026rsquo;s callable from Python.\nFunction arguments that are not explicitly typed will be treated as generic Python objects, and operated on through the CPython API.\nFunction overloads are also possible in Codon:\ndef bar(x: int): return x + 2 @overload def bar(x: str): return x * 2 This will result in a single Python function bar() that dispatches to the correct Codon bar() at runtime based on the argument\u0026rsquo;s type (or raise a TypeError on an invalid input type).\nTypes # Codon class definitions can also be converted to Python extension types via the @dataclass(python=True) decorator:\n@dataclass(python=True) class Vec: x: float y: float def __init__(self, x: float = 0.0, y: float = 0.0): self.x = x self.y = y def __add__(self, other: Vec): return Vec(self.x + other.x, self.y + other.y) def __add__(self, other: float): return Vec(self.x + other, self.y + other) def __repr__(self): return f\u0026#39;Vec({self.x}, {self.y})\u0026#39; Now in Python (assuming we compile to a module vec):\nfrom vec import Vec a = Vec(x=3.0, y=4.0) # Vec(3.0, 4.0) b = a + Vec(1, 2) # Vec(4.0, 6.0) c = b + 10.0 # Vec(14.0, 16.0) Building with setuptools # Codon\u0026rsquo;s pyext build mode can be used with setuptools. Here is a minimal example:\n# setup.py import os import sys import shutil from pathlib import Path from setuptools import setup, Extension from setuptools.command.build_ext import build_ext # Find Codon codon_path = os.environ.get(\u0026#39;CODON_DIR\u0026#39;) if not codon_path: c = shutil.which(\u0026#39;codon\u0026#39;) if c: codon_path = Path(c).parent / \u0026#39;..\u0026#39; else: codon_path = Path(codon_path) for path in [ os.path.expanduser(\u0026#39;~\u0026#39;) + \u0026#39;/.codon\u0026#39;, os.getcwd() + \u0026#39;/..\u0026#39;, ]: path = Path(path) if not codon_path and path.exists(): codon_path = path break if ( not codon_path or not (codon_path / \u0026#39;include\u0026#39; / \u0026#39;codon\u0026#39;).exists() or not (codon_path / \u0026#39;lib\u0026#39; / \u0026#39;codon\u0026#39;).exists() ): print( \u0026#39;Cannot find Codon.\u0026#39;, \u0026#39;Please either install Codon (https://github.com/exaloop/codon),\u0026#39;, \u0026#39;or set CODON_DIR if Codon is not in PATH.\u0026#39;, file=sys.stderr, ) sys.exit(1) codon_path = codon_path.resolve() print(\u0026#39;Found Codon:\u0026#39;, str(codon_path)) # Build with Codon class CodonExtension(Extension): def __init__(self, name, source): self.source = source super().__init__(name, sources=[], language=\u0026#39;c\u0026#39;) class BuildCodonExt(build_ext): def build_extensions(self): pass def run(self): inplace, self.inplace = self.inplace, False super().run() for ext in self.extensions: self.build_codon(ext) if inplace: self.copy_extensions_to_source() def build_codon(self, ext): extension_path = Path(self.get_ext_fullpath(ext.name)) build_dir = Path(self.build_temp) os.makedirs(build_dir, exist_ok=True) os.makedirs(extension_path.parent.absolute(), exist_ok=True) codon_cmd = str(codon_path / \u0026#39;bin\u0026#39; / \u0026#39;codon\u0026#39;) optimization = \u0026#39;-debug\u0026#39; if self.debug else \u0026#39;-release\u0026#39; self.spawn([codon_cmd, \u0026#39;build\u0026#39;, optimization, \u0026#39;--relocation-model=pic\u0026#39;, \u0026#39;-pyext\u0026#39;, \u0026#39;-o\u0026#39;, str(extension_path) + \u0026#34;.o\u0026#34;, \u0026#39;-module\u0026#39;, ext.name, ext.source]) ext.runtime_library_dirs = [str(codon_path / \u0026#39;lib\u0026#39; / \u0026#39;codon\u0026#39;)] self.compiler.link_shared_object( [str(extension_path) + \u0026#39;.o\u0026#39;], str(extension_path), libraries=[\u0026#39;codonrt\u0026#39;], library_dirs=ext.runtime_library_dirs, runtime_library_dirs=ext.runtime_library_dirs, extra_preargs=[\u0026#39;-Wl,-rpath,@loader_path\u0026#39;], debug=self.debug, build_temp=self.build_temp, ) self.distribution.codon_lib = extension_path setup( name=\u0026#39;mymodule\u0026#39;, version=\u0026#39;0.1\u0026#39;, packages=[\u0026#39;mymodule\u0026#39;], ext_modules=[ CodonExtension(\u0026#39;mymodule\u0026#39;, \u0026#39;mymodule.codon\u0026#39;), ], cmdclass={\u0026#39;build_ext\u0026#39;: BuildCodonExt} ) Then, for example, we can build with:\npython3 setup.py build_ext --inplace Finally, we can import mymodule in Python and use the module.\n"},{"id":14,"href":"/docs/interop/python/","title":"Python","section":"Docs","content":"Calling Python from Codon is possible in two ways:\nfrom python import allows importing and calling Python functions from existing Python modules. @python allows writing Python code directly in Codon. In order to use these features, the CODON_PYTHON environment variable must be set to the appropriate Python shared library:\nexport CODON_PYTHON=/path/to/libpython.X.Y.so For example, with a brew-installed Python 3.9 on macOS, this might be\n/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/lib/libpython3.9.dylib Note that only Python versions 3.6 and later are supported.\nfrom python import # Let's say we have a Python function defined in mymodule.py:\ndef multiply(a, b): return a * b We can call this function in Codon using from python import and indicating the appropriate call and return types:\nfrom python import mymodule.multiply(int, int) -\u0026gt; int print(multiply(3, 4)) # 12 (Be sure the PYTHONPATH environment variable includes the path of mymodule.py!)\nfrom python import does not need to specify explicit types, in which case Codon will operate directly on the Python objects, and convert Codon types to Python types as necessary:\nfrom python import numpy as np # Codon will call NumPy through CPython\u0026#39;s API x = np.array([1, 2, 3, 4]) * 10 print(x) # [10 20 30 40] @python # Codon programs can contain functions that will be executed by Python via pydef:\n@python def multiply(a: int, b: int) -\u0026gt; int: return a * b print(multiply(3, 4)) # 12 This makes calling Python modules like NumPy very easy:\n@python def myrange(n: int) -\u0026gt; List[int]: from numpy import arange return list(arange(n)) print(myrange(5)) # [0, 1, 2, 3, 4] Data conversions # Codon uses two new magic methods to transfer data to and from Python:\n__to_py__: Produces a Python object (PyObject* in C) given a Codon object. __from_py__: Produces a Codon object given a Python object. import python # needed to initialize the Python runtime o = (42).__to_py__() # type of \u0026#39;o\u0026#39; is \u0026#39;cobj\u0026#39;, equivalent to a pointer in C print(o) # 0x100e00610 n = int.__from_py__(o) print(n) # 42 Codon stores the results of __to_py__ calls by wrapping them in an instance of a new class called pyobj, which correctly handles the underlying Python object\u0026rsquo;s reference count. All operations on pyobjs then go through CPython\u0026rsquo;s API.\n"},{"id":15,"href":"/docs/intro/differences/","title":"Differences","section":"Docs","content":"While Codon\u0026rsquo;s syntax and semantics are nearly identical to Python\u0026rsquo;s, there are some notable differences that are worth mentioning. Most of these design decisions were made with the trade-off between performance and Python compatibility in mind.\nPlease see our roadmap for more information about how we plan to close some of these gaps in the future.\nData types # Integers: Codon\u0026rsquo;s int is a 64-bit signed integer, whereas Python\u0026rsquo;s (after version 3) can be arbitrarily large. However Codon does support larger integers via Int[N] where N is the bit width.\nStrings: Codon currently uses ASCII strings unlike Python\u0026rsquo;s unicode strings.\nDictionaries: Codon\u0026rsquo;s dictionary type does not preserve insertion order, unlike Python\u0026rsquo;s as of 3.6.\nTuples: Since tuples compile down to structs, tuple lengths must be known at compile time, meaning you can\u0026rsquo;t convert an arbitrarily-sized list to a tuple, for instance.\nType checking # Since Codon performs static type checking ahead of time, a few of Python\u0026rsquo;s dynamic features are disallowed. For example, monkey patching classes at runtime (although Codon supports a form of this at compile time) or adding objects of different types to a collection.\nThese few restrictions are ultimately what allow Codon to compile to native code without any runtime performance overhead. Future versions of Codon will lift some of these restrictions by the introduction of e.g. implicit union types.\nNumerics # For performance reasons, some numeric operations use C semantics rather than Python semantics. This includes, for example, raising an exception when dividing by zero, or other checks done by math functions. Strict adherence to Python semantics can be achieved by using the -numerics=py flag of the Codon compiler. Note that this does not change ints from 64-bit.\nModules # While most of the commonly used builtin modules have Codon-native implementations, a few are not yet implemented. However these can still be used within Codon via from python import.\n"},{"id":16,"href":"/docs/intro/faq/","title":"Faq","section":"Docs","content":" Technical # What is Codon? # Codon is a high-performance Python compiler that compiles Python code to native machine code without any runtime overhead. Typical speedups over Python are on the order of 10-100x or more, on a single thread. Codon\u0026rsquo;s performance is typically on par with that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still. Codon is extensible via a plugin infrastructure, which lets you incorporate new libraries, compiler optimizations and even keywords.\nWhat isn\u0026rsquo;t Codon? # While Codon supports nearly all of Python\u0026rsquo;s syntax, it is not a drop-in replacement, and large codebases might require modifications to be run through the Codon compiler. For example, some of Python\u0026rsquo;s modules are not yet implemented within Codon, and a few of Python\u0026rsquo;s dynamic features are disallowed. The Codon compiler produces detailed error messages to help identify and resolve any incompatibilities. Codon supports seamless Python interoperability to handle cases where specific Python libraries or dynamism are required, and also supports writing Python extension modules that can be imported and used from larger Python codebases.\nWhy Codon? # Python is arguably the world\u0026rsquo;s most popular programming language, and is gradually becoming the lingua franca particularly amongst non-technical or non-CS practitioners in numerous fields. It provides a readable, clean syntax, is easy to learn, and has an unmatched ecosystem of libraries. However, Python\u0026rsquo;s achilles heel has always been performance: a typical codebase in pure Python is orders of magnitude slower than its C/C++/Rust counterpart.\nCodon bridges the gap between Python\u0026rsquo;s simplicity and ease-of-use, and the performance of low-level languages like C++ or Rust, by using novel compiler and type checking techniques to statically compile code ahead-of-time, avoiding all of vanilla Python\u0026rsquo;s runtime overhead and performance drawbacks.\nHow does Codon compare to\u0026hellip; # CPython? Codon tries to follow CPython\u0026rsquo;s syntax, semantics and APIs as closely as possible, aside from a few cases where Codon differs from CPython for performance reasons (one example being Codon\u0026rsquo;s 64-bit int vs. CPython\u0026rsquo;s arbitrary- width int). Performance-wise, speedups over CPython are usually on the order of 10-100x.\nNumba? While Codon does offer a JIT decorator similar to Numba\u0026rsquo;s, Codon is in general an ahead-of-time compiler that compiles end-to-end programs to native code. It also supports compilation of a much broader set of Python constructs and libraries.\nPyPy? PyPy strives to effectively be a drop-in replacement for CPython, whereas Codon differs in a few places in order to eliminate any dynamic runtime or virtual machine, and thereby attain much better performance.\nCython? Like Cython, Codon has a Python-extension build mode that compiles to Python extension modules, allowing Codon-compiled code to be imported and called from plain Python.\nC++? Codon often generates the same code as an equivalent C or C++ program. Codon can sometimes generate better code than C/C++ compilers for a variety of reasons, such as better container implementations, the fact that Codon does not use object files and inlines all library code, or Codon-specific compiler optimizations that are not performed with C or C++.\nJulia? Codon\u0026rsquo;s compilation process is actually much closer to C++ than to Julia. Julia is a dynamically-typed language that performs type inference as an optimization, whereas Codon type checks the entire program ahead of time. Codon also tries to circumvent the learning curve of a new language by adopting Python\u0026rsquo;s syntax and semantics.\nMojo? Mojo strives to add low-level programming support/features to the Python language, while also supporting the rest of Python by relying on CPython. By contrast, Codon aims to make Python itself more performant by using new type checking and compilation techniques, without trying to be a superset or drop-in replacement. Codon tries to minimize new syntax and language features with respect to Python.\nYou can see results from Codon\u0026rsquo;s benchmark suite suite at exaloop.io/#benchmarks. More benchmarks can be found in the 2019 paper on bioinformatics-specific use cases (note that the name used in that paper is that of Codon\u0026rsquo;s predecessor, \u0026ldquo;Seq\u0026rdquo;).\nI want to use Codon, but I have a large Python codebase I don\u0026rsquo;t want to port. # You can use Codon on a per-function basis via the @codon.jit decorator, which can be used within Python codebases. This will compile only the annotated functions and automatically handle data conversions to and from Codon. It also allows for the use of any Codon-specific modules or extensions, such as multithreading.\nCodon can also compile to Python extension modules that can be imported and used from Python.\nWhat about interoperability with other languages and frameworks? # Interoperability is and will continue to be a priority for Codon. We don\u0026rsquo;t want using Codon to render you unable to use all the other great frameworks and libraries that exist. Codon supports full interoperability with Python and C/C++.\nDoes Codon use garbage collection? # Yes, Codon uses the Boehm garbage collector.\nCodon doesn\u0026rsquo;t support Python module X or function Y. # While Codon covers a sizeable subset of Python\u0026rsquo;s standard library, it does not yet cover every function from every module. Note that missing functions can still be called through Python via from python import. Many of the functions that lack Codon-native implementations (e.g. I/O or OS related functions) will generally also not see substantial speedups from Codon.\nCodon is no faster than Python for my application. # Applications that spend most of their time in C-implemented library code generally do not see substantial performance improvements in Codon. Similarly, applications that are I/O or network-bound will have the same bottlenecks in Codon.\nCodon is slower than Python for my application. # Please report any cases where Codon is noticeably slower than Python as bugs on our issue tracker.\nUsage # Is Codon free and open source? # Yes, Codon is free and open source under the Apache License, Version 2.0. Exaloop offers enterprise and custom solutions on top of Codon for a variety of applications, use cases and industries; please email info@exaloop.io to learn more.\nContributing # Does Codon accept outside contributions? # Absolutely, we\u0026rsquo;d be delighted to accept any contributions in the form of issues, bug reports, feature requests or pull requests.\nI want to contribute. Where do I start? # If you have a specific feature or use case in mind, here is a quick breakdown of the codebase to help provide a sense of where to look first:\ncodon/: compiler code codon/parser/: parser and type checker code: this is the first step of compilation codon/cir/: Codon IR and optimizations: the second step of compilation codon/cir/llvm/: conversion from Codon IR to LLVM IR and machine code: the last step of compilation codon/runtime/: runtime library: used during execution stdlib/: standard library code You can also take a look at some of the open issues. If you have any question or suggestions, please feel free to ask in the forum.\nIs there a Contributor License Agreement (CLA)? # Yes, there is a CLA that is required to be agreed to before any pull requests are merged. Please see exaloop.io/legal/cla for more information. To agree to the CLA, send an email with your GitHub username to info@exaloop.io.\n"},{"id":17,"href":"/docs/intro/intro/","title":"Intro","section":"Docs","content":" Using codon # The codon program can directly run Codon source in JIT mode:\ncodon run myprogram.codon The default compilation and run mode is debug (-debug). Compile and run with optimizations with the -release option:\ncodon run -release myprogram.codon codon can also build executables:\n# generate \u0026#39;myprogram\u0026#39; executable codon build -exe myprogram.codon # generate \u0026#39;foo\u0026#39; executable codon build -o foo myprogram.codon codon can produce object files:\n# generate \u0026#39;myprogram.o\u0026#39; object file codon build -obj myprogram.codon # generate \u0026#39;foo.o\u0026#39; object file codon build -o foo.o myprogram.codon codon can produce LLVM IR:\n# generate \u0026#39;myprogram.ll\u0026#39; object file codon build -llvm myprogram.codon # generate \u0026#39;foo.ll\u0026#39; object file codon build -o foo.ll myprogram.codon Compile-time definitions # codon allows for compile-time definitions via the -D flag. For example, in the following code:\nprint(Int[BIT_WIDTH]()) BIT_WIDTH can be specified on the command line as such: codon run -DBIT_WIDTH=10 myprogram.codon.\n"},{"id":18,"href":"/docs/intro/releases/","title":"Releases","section":"Docs","content":"Below you can find release notes for each major Codon release, listing improvements, updates, optimizations and more for each new version.\nThese release notes generally do not include small bug fixes. See the closed issues for more information.\nv0.18 # License change # Codon is now truly open source under the Apache license. Exaloop continues to offer enterprise licenses with added support, services and custom solutions for organizations that want and need them. Contact info@exaloop.io to learn more. New Codon-native NumPy implementation # New NumPy implementation for Codon, written in Codon itself. Interoperable with Codon\u0026rsquo;s multithreading and GPU backends. NumPy-specific compiler optimizations (e.g. operator fusion optimizations) added to Codon\u0026rsquo;s standard optimization suite. Learn more in the Codon-NumPy docs. New compiler options # -fast-math will enable fast-math optimizations. Use this flag with caution as it changes floating-point semantics. v0.17 # LLVM upgrade # Upgraded to LLVM 17 (from 15).\nStandard library updates # New floating-point types float16, bfloat16 and float128. Updates to several existing functions, such as adding key and default arguments to min() and max(). Slice arguments can now be of any type, not just int. Added input() function. Other improvements # Property setters are now supported. Updated import logic to match CPython\u0026rsquo;s more closely. Several improvements to dynamic polymorphism to match CPython more closely. New compiler options # -disable-exceptions will disable exceptions, potentially eliding various runtime checks (e.g. bounds checks for lists). This flag should only be used if you know that no exceptions will be raised in the given program. v0.16 # Python extensions # A new build mode is added to codon called pyext which compiles to Python extension modules, allowing Codon code to be imported and called directly from Python (similar to Cython). Please see the docs for more information and usage examples.\nStandard library updates # Various additions to the standard library, such as math.fsum() and the built-in pow().\nAdded complex64, which is a complex number with 32-bit float real and imaginary components.\nBetter Int[N] and UInt[N] support: can now convert ints wider than 64-bit to string; now supports more operators.\nMore Python-specific optimizations # New optimizations for specific patterns including any()/all() and multiple list concatenations. These patterns are now recognized and optimized in Codon\u0026rsquo;s IR.\nStatic expressions # Codon now supports more compile-time static functions, such as staticenumerate.\nv0.15 # Union types # Codon adds support for union types (e.g., Union[int, float]):\ndef foo(cmd) -\u0026gt; Union: if cmd == \u0026#39;int\u0026#39;: return 1 else: return \u0026#34;s\u0026#34; foo(\u0026#39;int\u0026#39;) # type is Union[int,str] 5 + foo(\u0026#39;int\u0026#39;) # 6 \u0026#39;a\u0026#39; + foo(\u0026#39;str\u0026#39;) # as Dynamic inheritance # Dynamic inheritance and polymorphism are now supported:\nclass A: def __repr__(): return \u0026#39;A\u0026#39; class B(A): def __repr__(): return \u0026#39;B\u0026#39; l = [A(), B(), A()] # type of l is List[A] print(l) # [A, B, A] This feature is still a work in progress.\nLLVM upgrade # Upgraded to LLVM 15 (from 12). Note that LLVM 15 now uses opaque pointers, e.g. ptr instead of i8* or i64*, which affects @llvm functions written in Codon as well as LLVM IR output of codon build.\nStandard library # random module now matches Python exactly for the same seed.\nv0.14 # GPU support # GPU kernels can now be written and called in Codon. Existing loops can be parallelized on the GPU with the @par(gpu=True) annotation. Please see the docs for more information and examples.\nSemantics # Added -numerics flag, which specifies semantics of various numeric operations:\n-numerics=c (default): C semantics; best performance -numerics=py: Python semantics (checks for zero divisors and raises ZeroDivisionError, and adds domain checks to math functions); might slightly decrease performance. Types # Added float32 type to represent 32-bit floats (equivalent to C\u0026rsquo;s float). All math functions now have float32 overloads.\nParallelism # Added collapse option to @par:\n@par(collapse=2) # parallelize entire iteration space of 2 loops for i in range(N): for j in range(N): do_work(i, j) Standard library # Added collections.defaultdict.\nPython interoperability # Various Python interoperability improvements: can now use isinstance on Python objects/types and can now catch Python exceptions by name.\nv0.13 # Language # Scoping # Scoping was changed to match Python scoping. For example:\nif condition: x = 42 print(x) If condition is False, referencing x causes a NameError to be raised at runtime, much like what happens in Python. There is zero new performance overhead for code using the old scoping; code using the new scoping as above generates a flag to indicate whether the given variable has been assigned.\nMoreover, variables can now be assigned to different types:\nx = 42 print(x) # 42 x = \u0026#39;hello\u0026#39; print(x) # hello The same applies in Jupyter or JIT environments.\nStatic methods # Added support for @staticmethod method decorator. Class variables are also supported:\nclass Cls: a = 5 # or \u0026#34;a: ClassVar[int] = 5\u0026#34; (PEP 526) @staticmethod def method(): print(\u0026#39;hello world\u0026#39;) c = Cls() Cls.a, Cls.method(), c.a, c.method() # supported Tuple handling # Arbitrary classes can now be converted to tuples via the tuple() function.\nVoid type # The void type has been completely removed in favor of the new and Pythonic NoneType, which compiles to an empty LLVM struct. This does not affect C interoperability as the empty struct type is replaced by void by LLVM.\nStandard library # The re module is now fully supported, and uses Google\u0026rsquo;s re2 as a backend. Future versions of Codon will also include an additional regex optimization pass to compile constant (\u0026ldquo;known at compile time\u0026rdquo;) regular expressions to native code.\nC variables # Global variables with C linkage can now be imported via from C import:\n# assumes the C variable \u0026#34;long foo\u0026#34; from C import foo: int print(foo) Parallelism # Numerous improvements to the OpenMP backend, including the addition of task-based reductions:\ntotal = 0 @par for a in some_arbitrary_generator(): total += do_work(a) # now converted to task reduction Python interoperability # Included revamped codon module for Python, with @codon.jit decorator for compiling Python code in existing codebases. Further improved and optimized the Python bridge. Please see the docs for more information.\nCodon IR # New capture analysis pass for Codon IR for improving tasks such as dead code elimination and side effect analysis. This allows Codon IR to deduce whether arbitrary, compilable Python expressions have side effects, capture variables, and more.\nCode generation and optimizations # A new dynamic allocation optimization pass is included, which 1) removes unused allocations (e.g. instantiating a class but never using it) and 2) demotes small heap allocations to stack (alloca) allocations when possible. The latter optimization can frequently remove any overhead associated with instantiating most classes.\nCommand-line tool # The codon binary can now compile to shared libraries using the -lib option to codon build (or it can be deduced from a .so or .dylib extension on the output file name).\nErrors # Added support for multiple error reporting.\n"},{"id":19,"href":"/docs/intro/roadmap/","title":"Roadmap","section":"Docs","content":"Codon\u0026rsquo;s goal is to be as close to CPython as possible while still being fully statically compilable. While Codon already supports much of Python, there is still much to be done to fully realize its potential. Here is a high-level roadmap of the things we want to add, implement or explore.\nCore features # Type system improvements:\nFirst-class types and compile-time metaclasses Full class member deduction Implicit union types to support mixed-type collections Variadic type arguments (e.g. Foo[Bar, ...]) Parallelism\nasync/await support multiprocessing support Automatic locking in parallel code (e.g. if mutating a data structure shared between threads) Race detection Compatibility with Python 3.10+:\nArgument separators (/ and *) Constructor object matching in the match statement Support accessing various object properties (__dict__, __slots__ etc.) as much as possible in a static context Optional automatic switching between Codon and CPython (i.e. compile only compatible functions and leave the rest to Python)\nBetter error messages\nWarning support Explain performance considerations Explain that a CPython feature is not supported Modules and incremental compilation\nCache compilation modules Fast generics compilation in debug mode for quick turnarounds Memory management\nAuto-tune GC Optional alternative memory management modes like reference counting GPU support\nTarget Apple, AMD and Intel GPUs GPU-specific compiler optimizations (e.g. for using various Python constructs on the GPU) Interoperability with other languages\nDirect C++ interoperability via Clang R interoperability Libraries # Currently, missing Python functionality can be easily accessed via a from python import foo statement, which is sufficient in most cases as many libraries are just thin wrappers around a C library and/or not performance-sensitive.\nHowever, in the near future, we would like to support the following modules natively:\nPython\u0026rsquo;s standard library\nComplete builtins support 1-to-1 compatibility with existing Python functions and modules File modules: os, sys, struct, pathlib and so on Pretty much everything else on an as-needed basis Native NumPy, Pandas, etc.: Having Codon-native versions of the most popular 3rd-party libraries would allow them to work with Codon\u0026rsquo;s other features like multithreading and GPU. We\u0026rsquo;re currently prioritizing NumPy and Pandas but aim to later target other popular libraries as well.\nAs of Codon 0.18, NumPy is natively supported! Unicode support\nPython\u0026rsquo;s testing infrastructure\nInfrastructure \u0026amp; Tools # Windows support\nA sane package manager similar to Rust\u0026rsquo;s Cargo\nAuto-detection of installed Python libraries\nImproved codon.jit library support\nBetter error messages Better installation flow Fully static binary support like Go\nRemove libcodonrt (runtime library) dependency if needed Remove libcpp dependency Improved Jupyter support\nAuto-completion and code inspection Jupyter magic command support Plugins for Visual Studio Code, Vim, Emacs and so on\nDocumentation # Fully document major differences with CPython Document Codon IR API, with guides and tutorials Document all supported modules Nice to have # Implement Codon in Codon "},{"id":20,"href":"/docs/language/basics/","title":"Basics","section":"Docs","content":"If you know Python, you already know 99% of Codon. This section covers the Codon language as well as some of the key differences and additional features on top of Python.\nPrinting # print(\u0026#39;hello world\u0026#39;) from sys import stderr print(\u0026#39;hello world\u0026#39;, end=\u0026#39;\u0026#39;, file=stderr) Comments # # Codon comments start with \u0026#34;# \u0026#39;and go until the end of the line \u0026#34;\u0026#34;\u0026#34; Multi-line comments are possible like this. \u0026#34;\u0026#34;\u0026#34; Literals # # Booleans True # type: bool False # Numbers a = 1 # type: int; a signed 64-bit integer b = 1.12 # type: float; a 64-bit float (just like \u0026#34;double\u0026#34; in C) c = 5u # unsigned int; an unsigned 64-bit int d = Int[8](12) # 8-bit signed integer; you can go all the way to Int[2048] e = UInt[8](200) # 8-bit unsigned integer f = byte(3) # Codon\u0026#39;s byte is equivalent to C\u0026#39;s char; equivalent to Int[8] h = 0x12AF # hexadecimal integers are also welcome g = 3.11e+9 # scientific notation is also supported g = .223 # and this is also float g = .11E-1 # and this as well # Strings s = \u0026#39;hello! \u0026#34;^_^\u0026#34; \u0026#39; # type: str t = \u0026#34;hello there! \\t \\\\ \u0026#39;^_^\u0026#39; \u0026#34; # \\t is a tab character; \\\\ stands for \\ raw = r\u0026#34;hello\\n\u0026#34; # raw strings do not escape slashes; this would print \u0026#34;hello\\n\u0026#34; fstr = f\u0026#34;a is {a + 1}\u0026#34; # an f-string; prints \u0026#34;a is 2\u0026#34; fstr = f\u0026#34;hi! {a+1=}\u0026#34; # an f-string; prints \u0026#34;hi! a+1=2\u0026#34; t = \u0026#34;\u0026#34;\u0026#34; hello! multiline string \u0026#34;\u0026#34;\u0026#34; # The following escape sequences are supported: # \\\\, \\\u0026#39;, \\\u0026#34;, \\a, \\b, \\f, \\n, \\r, \\t, \\v, # \\xHHH (HHH is hex code), \\OOO (OOO is octal code) Assignments and operators # a = 1 + 2 # this is 3 a = (1).__add__(2) # you can use a function call instead of an operator; this is also 3 a = int.__add__(1, 2) # this is equivalent to the previous line b = 5 / 2.0 # this is 2.5 c = 5 // 2 # this is 2; // is an integer division a *= 2 # a is now 6 Here is the list of binary operators and each one\u0026rsquo;s associated magic method:\nOperator Magic method Description + __add__ addition - __sub__ subtraction * __mul__ multiplication / __truediv__ float (true) division // __floordiv__ integer (floor) division ** __pow__ exponentiation % __mod__ modulo @ __matmul__ matrix multiplication \u0026amp; __and__ bitwise and | __or__ bitwise or ^ __xor__ bitwise xor \u0026lt;\u0026lt; __lshift__ left bit shift \u0026gt;\u0026gt; __rshift__ right bit shift \u0026lt; __lt__ less than \u0026lt;= __le__ less than or equal to \u0026gt; __gt__ greater than \u0026gt;= __ge__ greater than or equal to == __eq__ equal to != __ne__ not equal to in __contains__ belongs to and none boolean and (short-circuits) or none boolean or (short-circuits) Codon also has the following unary operators:\nOperator Magic method Description ~ __invert__ bitwise not + __pos__ unary positive - __neg__ unary negation not none boolean negation Control flow # Conditionals # Codon supports the standard Python conditional syntax:\nif a or b or some_cond(): print(1) elif whatever() or 1 \u0026lt; a \u0026lt;= b \u0026lt; c \u0026lt; 4: # chained comparisons are supported print(\u0026#39;meh...\u0026#39;) else: print(\u0026#39;lo and behold!\u0026#39;) a = b if sth() else c # ternary conditional operator Codon extends the Python conditional syntax with a match statement, which is inspired by Rust\u0026rsquo;s:\nmatch a + some_heavy_expr(): # assuming that the type of this expression is int case 1: # is it 1? print(\u0026#39;hi\u0026#39;) case 2 ... 10: # is it 2, 3, 4, 5, 6, 7, 8, 9 or 10? print(\u0026#39;wow!\u0026#39;) case _: # \u0026#34;default\u0026#34; case print(\u0026#39;meh...\u0026#39;) match bool_expr(): # now it\u0026#39;s a bool expression case True: print(\u0026#39;yay\u0026#39;) case False: print(\u0026#39;nay\u0026#39;) match str_expr(): # now it\u0026#39;s a str expression case \u0026#39;abc\u0026#39;: print(\u0026#34;it\u0026#39;s ABC time!\u0026#34;) case \u0026#39;def\u0026#39; | \u0026#39;ghi\u0026#39;: # you can chain multiple rules with the \u0026#34;|\u0026#34; operator print(\u0026#34;it\u0026#39;s not ABC time!\u0026#34;) case s if len(s) \u0026gt; 10: print(\u0026#34;so looong!\u0026#34;) # conditional match expression case _: assert False match some_tuple: # assuming type of some_tuple is Tuple[int, int] case (1, 2): ... case (a, _) if a == 42: # you can do away with useless terms with an underscore print(\u0026#39;hitchhiker!\u0026#39;) case (a, 50 ... 100) | (10 ... 20, b): # you can nest match expressions print(\u0026#39;complex!\u0026#39;) match list_foo(): case []: # [] matches an empty list print(\u0026#39;A\u0026#39;) case [1, 2, 3]: # make sure that list_foo() returns List[int] though! print(\u0026#39;B\u0026#39;) case [1, 2, ..., 5]: # matches any list that starts with 1 and 2 and ends with 5 print(\u0026#39;C\u0026#39;) case [..., 6] | [6, ...]: # matches a list that starts or ends with 6 print(\u0026#39;D\u0026#39;) case [..., w] if w \u0026lt; 0: # matches a list that ends with a negative integer print(\u0026#39;E\u0026#39;) case [...]: # any other list print(\u0026#39;F\u0026#39;) You can mix, match and chain match rules as long as the match type matches the expression type.\nLoops # Standard fare:\na = 10 while a \u0026gt; 0: # prints even numbers from 9 to 1 a -= 1 if a % 2 == 1: continue print(a) for i in range(10): # prints numbers from 0 to 7, inclusive print(i) if i \u0026gt; 6: break for construct can iterate over any generator, which means any object that implements the __iter__ magic method. In practice, generators, lists, sets, dictionaries, homogenous tuples, ranges, and many more types implement this method. If you need to implement one yourself, just keep in mind that __iter__ is a generator and not a function.\nImports # You can import functions and classes from another Codon module by doing:\n# Create foo.codon with a bunch of useful methods import foo foo.useful1() p = foo.FooType() # Create bar.codon with a bunch of useful methods from bar import x, y x(y) from bar import z as bar_z bar_z() import foo looks for foo.codon or foo/__init__.codon in the current directory.\nExceptions # Again, if you know how to do this in Python, you know how to do it in Codon:\ndef throwable(): raise ValueError(\u0026#34;doom and gloom\u0026#34;) try: throwable() except ValueError as e: print(\u0026#34;we caught the exception\u0026#34;) except: print(\u0026#34;ouch, we\u0026#39;re in deep trouble\u0026#34;) finally: print(\u0026#34;whatever, it\u0026#39;s done\u0026#34;) {% hint style=\u0026ldquo;warning\u0026rdquo; %} Right now, Codon cannot catch multiple exceptions in one statement. Thus catch (Exc1, Exc2, Exc3) as var will not compile, since the type of var needs to be known ahead of time. {% endhint %}\nIf you have an object that implements __enter__ and __exit__ methods to manage its lifetime (say, a File), you can use a with statement to make your life easier:\nwith open(\u0026#39;foo.txt\u0026#39;) as f, open(\u0026#39;foo_copy.txt\u0026#39;, \u0026#39;w\u0026#39;) as fo: for l in f: fo.write(l) "},{"id":21,"href":"/docs/language/classes/","title":"Classes","section":"Docs","content":"Codon supports classes just like Python. However, you must declare class members and their types in the preamble of each class (like you would do with Python\u0026rsquo;s dataclasses):\nclass Foo: x: int y: int def __init__(self, x: int, y: int): # constructor self.x, self.y = x, y def method(self): print(self.x, self.y) f = Foo(1, 2) f.method() # prints \u0026#34;1 2\u0026#34; Unlike Python, Codon supports method overloading:\nclass Foo: x: int y: int def __init__(self): # constructor self.x, self.y = 0, 0 def __init__(self, x: int, y: int): # another constructor self.x, self.y = x, y def __init__(self, x: int, y: float): # yet another constructor self.x, self.y = x, int(y) def method(self: Foo): print(self.x, self.y) Foo().method() # prints \u0026#34;0 0\u0026#34; Foo(1, 2).method() # prints \u0026#34;1 2\u0026#34; Foo(1, 2.3).method() # prints \u0026#34;1 2\u0026#34; Foo(1.1, 2.3).method() # error: there is no Foo.__init__(float, float) Classes can also be generic:\nclass Container[T]: elements: List[T] def __init__(self, elements: List[T]): self.elements = elements Classes create objects that are passed by reference:\nclass Point: x: int y: int p = Point(1, 2) q = p # this is a reference! p.x = 2 print((p.x, p.y), (q.x, q.y)) # (2, 2), (2, 2) If you need to copy an object\u0026rsquo;s contents, implement the __copy__ magic method and use q = copy(p) instead.\nClasses can inherit from other classes:\nclass NamedPoint(Point): name: str def __init__(self, x: int, y: int, name: str): super().__init__(x, y) self.name = name {% hint style=\u0026ldquo;warning\u0026rdquo; %} Currently, inheritance in Codon is still under active development. Treat it as a beta feature. {% endhint %}\nNamed tuples # Codon also supports pass-by-value types via the @tuple annotation, which are effectively named tuples (equivalent to Python\u0026rsquo;s collections.namedtuple):\n@tuple class Point: x: int y: int p = Point(1, 2) q = p # this is a copy! print((p.x, p.y), (q.x, q.y)) # (1, 2), (1, 2) However, named tuples are immutable. The following code will not compile:\np = Point(1, 2) p.x = 2 # error: immutable type You can also add methods to named tuples:\n@tuple class Point: x: int y: int def __new__(): # named tuples are constructed via __new__, not __init__ return Point(0, 1) def some_method(self): return self.x + self.y p = Point() # p is (0, 1) print(p.some_method()) # 1 Type extensions # Suppose you have a class that lacks a method or an operator that might be really useful. Codon provides an @extend annotation that allows programmers to add and modify methods of various types at compile time, including built-in types like int or str. This actually allows much of the functionality of built-in types to be implemented in Codon as type extensions in the standard library.\nclass Foo: ... f = Foo(...) # We need foo.cool() but it does not exist... not a problem for Codon @extend class Foo: def cool(self: Foo): ... f.cool() # works! # Let\u0026#39;s add support for adding integers and strings: @extend class int: def __add__(self: int, other: str): return self + int(other) print(5 + \u0026#39;4\u0026#39;) # 9 Note that all type extensions are performed strictly at compile time and incur no runtime overhead.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Type extensions in Codon are also a beta feature. {% endhint %}\nMagic methods # Here is a list of useful magic methods that you might want to add and overload:\nMagic method Description __copy__ copy-constructor for copy method __len__ for len method __bool__ for bool method and condition checking __getitem__ overload obj[key] __setitem__ overload obj[key] = value __delitem__ overload del obj[key] __iter__ support iterating over the object __repr__ support printing and str conversion "},{"id":22,"href":"/docs/language/collections/","title":"Collections","section":"Docs","content":"Collections are largely the same as in Python:\nl = [1, 2, 3] # type: List[int]; a list of integers s = {1.1, 3.3, 2.2, 3.3} # type: Set[float]; a set of floats d = {1: \u0026#39;hi\u0026#39;, 2: \u0026#39;ola\u0026#39;, 3: \u0026#39;zdravo\u0026#39;} # type: Dict[int, str]; a dictionary of int to str ln = [] # an empty list whose type is inferred based on usage ln = List[int]() # an empty list with explicit element type dn = {} # an empty dict whose type is inferred based on usage dn = Dict[int, float]() # an empty dictionary with explicit element types sn = set() # an empty set whose type is inferred based on usage sn = Set[str]() # an empty set with explicit element type Lists also take an optional capacity constructor argument, which can be useful when creating large lists:\nsquares = list(capacity=1_000_000) # list with room for 1M elements # Fill the list for i in range(1_000_000): squares.append(i ** 2) {% hint style=\u0026ldquo;info\u0026rdquo; %} Dictionaries and sets are unordered and are based on klib. {% endhint %}\nComprehensions # Comprehensions are a nifty, Pythonic way to create collections, and are fully supported by Codon:\nl = [i for i in range(5)] # type: List[int]; l is [0, 1, 2, 3, 4] l = [i for i in range(15) if i % 2 == 1 if i \u0026gt; 10] # type: List[int]; l is [11, 13] l = [i * j for i in range(5) for j in range(5) if i == j] # l is [0, 1, 4, 9, 16] s = {abs(i - j) for i in range(5) for j in range(5)} # s is {0, 1, 2, 3, 4} d = {i: f\u0026#39;item {i+1}\u0026#39; for i in range(3)} # d is {0: \u0026#34;item 1\u0026#34;, 1: \u0026#34;item 2\u0026#34;, 2: \u0026#34;item 3\u0026#34;} You can also use generators to create collections:\ng = (i for i in range(10)) print(list(g)) # prints list of integers from 0 to 9, inclusive Tuples # t = (1, 2.3, \u0026#39;hi\u0026#39;) # type: Tuple[int, float, str] t[1] # type: float u = (1, ) # type: Tuple[int] As all types must be known at compile time, tuple indexing works only if a tuple is homogenous (all types are the same) or if the value of the index is known at compile time.\nYou can, however, iterate over heterogenous tuples in Codon. This is achieved behind the scenes by unrolling the loop to accommodate the different types.\nt = (1, 2.3, \u0026#39;hi\u0026#39;) t[1] # works because 1 is a constant int x = int(argv[1]) t[x] # compile error: x is not known at compile time # This is a homogenous tuple (all member types are the same) u = (1, 2, 3) # type: Tuple[int, int, int] u[x] # works because tuple members share the same type regardless of x for i in u: # works print(i) # Also works v = (42, \u0026#39;x\u0026#39;, 3.14) for i in v: print(i) {% hint style=\u0026ldquo;warning\u0026rdquo; %} Just like in Python, tuples are immutable, so a = (1, 2); a[1] = 1 will not compile. {% endhint %}\nCodon supports most of Python\u0026rsquo;s tuple unpacking syntax:\nx, y = 1, 2 # x is 1, y is 2 (x, (y, z)) = 1, (2, 3) # x is 1, y is 2, z is 3 [x, (y, z)] = (1, [2, 3]) # x is 1, y is 2, z is 3 l = range(1, 8) # l is [1, 2, 3, 4, 5, 6, 7] a, b, *mid, c = l # a is 1, b is 2, mid is [3, 4, 5, 6], c is 7 a, *end = l # a is 1, end is [2, 3, 4, 5, 6, 7] *beg, c = l # c is 7, beg is [1, 2, 3, 4, 5, 6] (*x, ) = range(3) # x is [0, 1, 2] *x = range(3) # error: this does not work *sth, a, b = (1, 2, 3, 4) # sth is (1, 2), a is 3, b is 4 *sth, a, b = (1.1, 2, 3.3, 4) # error: this only works on homogenous tuples for now (x, y), *pff, z = [1, 2], \u0026#39;this\u0026#39; print(x, y, pff, z) # x is 1, y is 2, pff is an empty tuple --- () ---, and z is \u0026#34;this\u0026#34; s, *q = \u0026#39;XYZ\u0026#39; # works on strings as well; s is \u0026#34;X\u0026#34; and q is \u0026#34;YZ\u0026#34; Strong typing # Because Codon is strongly typed, these won\u0026rsquo;t compile:\nl = [1, \u0026#39;s\u0026#39;] # is it a List[int] or List[str]? you cannot mix-and-match types d = {1: \u0026#39;hi\u0026#39;} d[2] = 3 # d is a Dict[int, str]; the assigned value must be a str t = (1, 2.2) # Tuple[int, float] lt = list(t) # compile error: t is not homogenous lp = [1, 2.1, 3, 5] # compile error: Codon will not automatically cast a float to an int This will work, though:\nu = (1, 2, 3) lu = list(u) # works: u is homogenous "},{"id":23,"href":"/docs/language/extra/","title":"Extra","section":"Docs","content":"Codon supports a number of additional types that are not present in plain Python.\nArbitrary-width integers # Codon\u0026rsquo;s int type is a 64-bit signed integer. However, Codon supports arbitrary-width signed and unsigned integers:\na = Int[16](42) # signed 16-bit integer 42 b = UInt[128](99) # unsigned 128-bit integer 99 The Codon standard library provides shorthands for the common variants:\ni8/u8: signed/unsigned 8-bit integer i16/u16: signed/unsigned 16-bit integer i32/u32: signed/unsigned 32-bit integer i64/u64: signed/unsigned 64-bit integer 32-bit float # Codon\u0026rsquo;s float type is a 64-bit floating point value. Codon also supports float32 (or f32 as a shorthand), representing a 32-bit floating point value (like C\u0026rsquo;s float).\nPointers # Codon has a Ptr[T] type that represents a pointer to an object of type T. Pointers can be useful when interfacing with C. The __ptr__ keyword can also be used to obtain a pointer to a variable:\np = Ptr[int](100) # allocate a buffer of 100 ints p = Ptr[int]() # null pointer x = 42 p = __ptr__(x) # pointer to x, like \u0026#34;\u0026amp;x\u0026#34; in C from C import foo(Ptr[int]) foo(p) # pass pointer to C function The cobj alias corresponds to void* in C and represents a generic C or C++ object.\n{% hint style=\u0026ldquo;warning\u0026rdquo; %} Using pointers directly circumvents any runtime checks, so dereferencing a null pointer, for example, will cause a segmentation fault just like in C. {% endhint %}\nStatic arrays # The __array__ keyword can be used to allocate static arrays on the stack:\ndef foo(n): arr = __array__[int](5) # similar to \u0026#34;long arr[5]\u0026#34; in C arr[0] = 11 arr[1] = arr[0] + 1 ... "},{"id":24,"href":"/docs/language/ffi/","title":"Ffi","section":"Docs","content":"Codon can seamlessly call functions from C and Python:\nfrom C import pow(float, float) -\u0026gt; float pow(2.0, 2.0) # 4.0 # Import and rename function # cobj is a C pointer (void*, char*, etc.) # None can be used to represent C\u0026#39;s void from C import puts(cobj) -\u0026gt; None as print_line print_line(\u0026#34;hello\u0026#34;.c_str()) # prints \u0026#34;hello\u0026#34;; c_str() converts Codon str to C string from C import only works if the symbol is available to the program. If you are running your programs via codon, you can link dynamic libraries with -l: codon run -l /path/to/library.so ....\nYou can also load shared libraries with dlopen:\nLIBRARY = \u0026#34;somelib.so\u0026#34; from C import LIBRARY.mymethod(int, float) -\u0026gt; cobj from C import LIBRARY.myothermethod(int, float) -\u0026gt; cobj as my2 foo = mymethod(1, 2.2) foo2 = my2(4, 3.2) {% hint style=\u0026ldquo;warning\u0026rdquo; %} When importing C functions, you must explicitly specify argument and return types. {% endhint %}\nHow about Python? If you have set the CODON_PYTHON environment variable to point to the Python library, you can do:\nfrom python import mymodule.myfunction(str) -\u0026gt; int as foo print(foo(\u0026#34;bar\u0026#34;)) You might want to execute more complex Python code within Codon. To that end, you can use Codon\u0026rsquo;s @python annotation:\n@python def scipy_eigenvalues(i: List[List[float]]) -\u0026gt; List[float]: # Code within this block is executed by the Python interpreter, # so it must be valid Python code. import scipy.linalg import numpy as np data = np.array(i) eigenvalues, _ = scipy.linalg.eig(data) return list(eigenvalues) print(scipy_eigenvalues([[1.0, 2.0], [3.0, 4.0]])) # [-0.372281, 5.37228] Codon will automatically bridge any object that implements the __to_py__ and __from_py__ magic methods. All standard Codon types already implement these methods.\n"},{"id":25,"href":"/docs/language/functions/","title":"Functions","section":"Docs","content":"Functions are defined as follows:\ndef foo(a, b, c): return a + b + c print(foo(1, 2, 3)) # prints 6 Functions don\u0026rsquo;t have to return a value:\ndef proc(a, b): print(a, \u0026#39;followed by\u0026#39;, b) proc(1, \u0026#39;s\u0026#39;) def proc2(a, b): if a == 5: return print(a, \u0026#39;followed by\u0026#39;, b) proc2(1, \u0026#39;s\u0026#39;) proc2(5, \u0026#39;s\u0026#39;) # this prints nothing Codon is a strongly-typed language, so you can restrict argument and return types:\ndef fn(a: int, b: float): return a + b # this works because int implements __add__(float) fn(1, 2.2) # 3.2 fn(1.1, 2) # error: 1.1. is not an int def fn2(a: int, b): return a - b fn2(1, 2) # -1 fn2(1, 1.1) # -0.1; works because int implements __sub__(float) fn2(1, \u0026#39;s\u0026#39;) # error: there is no int.__sub__(str)! def fn3(a, b) -\u0026gt; int: return a + b fn3(1, 2) # works, since 1 + 2 is an int fn3(\u0026#39;s\u0026#39;, \u0026#39;u\u0026#39;) # error: \u0026#39;s\u0026#39;+\u0026#39;u\u0026#39; returns \u0026#39;su\u0026#39; which is str # but the signature indicates that it must return int Default and named arguments are also supported:\ndef foo(a, b: int, c: float = 1.0, d: str = \u0026#39;hi\u0026#39;): print(a, b, c, d) foo(1, 2) # prints \u0026#34;1 2 1 hi\u0026#34; foo(1, d=\u0026#39;foo\u0026#39;, b=1) # prints \u0026#34;1 1 1 foo\u0026#34; As are optional arguments:\n# type of b promoted to Optional[int] def foo(a, b: int = None): print(a, b + 1) foo(1, 2) # prints \u0026#34;1 3\u0026#34; foo(1) # raises ValueError, since b is None Generics # Codon emulates Python\u0026rsquo;s lax runtime type checking using a technique known as monomorphization. If a function has an argument without a type definition, Codon will treat it as a generic function, and will generate different instantiations for each different invocation:\ndef foo(x): print(x) # print relies on typeof(x).__repr__(x) method to print the representation of x foo(1) # Codon automatically generates foo(x: int) and calls int.__repr__ when needed foo(\u0026#39;s\u0026#39;) # Codon automatically generates foo(x: str) and calls str.__repr__ when needed foo([1, 2]) # Codon automatically generates foo(x: List[int]) and calls List[int].__repr__ when needed But what if you need to mix type definitions and generic types? Say, your function can take a list of anything? You can use generic type parameters:\ndef foo(x: List[T], T: type): print(x) foo([1, 2]) # prints [1, 2] foo([\u0026#39;s\u0026#39;, \u0026#39;u\u0026#39;]) # prints [s, u] foo(5) # error: 5 is not a list! foo([\u0026#39;s\u0026#39;, \u0026#39;u\u0026#39;], int) # fails: T is int, so foo expects List[int] but it got List[str] def foo(x, R: type) -\u0026gt; R: print(x) return 1 foo(4, int) # prints 4, returns 1 foo(4, str) # error: return type is str, but foo returns int! {% hint style=\u0026ldquo;info\u0026rdquo; %} Coming from C++? foo(x: List[T], T: type): ... is roughly the same as template\u0026lt;typename T, typename U\u0026gt; U foo(T x) { ... }. {% endhint %}\nGeneric type parameters are an optional way to enforce various typing constraints.\n"},{"id":26,"href":"/docs/language/generators/","title":"Generators","section":"Docs","content":"Codon supports generators, and in fact they are heavily optimized in the compiler so as to typically eliminate any overhead:\ndef gen(n): i = 0 while i \u0026lt; n: yield i ** 2 i += 1 print(list(gen(10))) # prints [0, 1, 4, ..., 81] print(list(gen(0))) # prints [] You can also use yield to implement coroutines: yield suspends the function, while (yield) (i.e. with parenthesis) receives a value, as in Python.\ndef mysum(start): m = start while True: a = (yield) # receives the input of coroutine.send() call if a == -1: break # exits the coroutine m += a yield m iadder = mysum(0) # assign a coroutine next(iadder) # activate it for i in range(10): iadder.send(i) # send a value to coroutine print(iadder.send(-1)) # prints 45 Generator expressions are also supported:\nsquares = (i ** 2 for i in range(10)) for i,s in enumerate(squares): print(i, \u0026#39;x\u0026#39;, i, \u0026#39;=\u0026#39;, s) "},{"id":27,"href":"/docs/language/llvm/","title":"Llvm","section":"Docs","content":"Codon allows inline LLVM IR via the @llvm annotation:\n@llvm def llvm_add(a: int, b: int) -\u0026gt; int: %res = add i64 %a, %b ret i64 %res print(llvm_add(3, 4)) # 7 Note that LLVM functions must explicitly specify argument and return types.\nLLVM functions can also be generic, and a format specifier in the body will be replaced by the appropriate LLVM type:\n@llvm def llvm_add[T](a: T, b: T) -\u0026gt; T: %res = add {=T} %a, %b ret {=T} %res print(llvm_add(3, 4)) # 7 print(llvm_add(i8(5), i8(6))) # 11 You can also access LLVM intrinsics with declare:\n@llvm def popcnt(n: int) -\u0026gt; int: declare i64 @llvm.ctpop.i64(i64) %0 = call i64 @llvm.ctpop.i64(i64 %n) ret i64 %0 print(popcnt(42)) # 3 Annotations # Sometimes it can be helpful to annotate @llvm functions to give the compiler more information as to how they behave. Codon has a number of default annotations for LLVM functions (all of which also apply to external/C functions):\n@pure: Function does not capture arguments (aside from return value capturing as in def foo(x): return x), does not modify arguments, and has no side effects. This is a mathematically \u0026ldquo;pure\u0026rdquo; function.\n@no_side_effect: Very similar to @pure but function may return different results on different calls, such as the C function time().\n@nocapture: Function does not capture any of its arguments (again excluding return value capturing).\n@self_captures: Function\u0026rsquo;s first (self) argument captures the other arguments, an example being List.__setitem__().\nThese are mutually-exclusive annotations. Another complementary annotation @derives can be used to indicate that the return value of the function captures its arguments.\nThese annotations are completely optional and do not affect program semantics.\n"},{"id":28,"href":"/docs/language/statics/","title":"Statics","section":"Docs","content":"Sometimes, certain values or conditions need to be known at compile time. For example, the bit width N of an integer type Int[N], or the size M of a static array __array__[int](M) need to be compile time constants.\nTo accomodate this, Codon uses static values, i.e. values that are known and can be operated on at compile time. Static[T] represents a static value of type T. Currently, T can only be int or str.\nFor example, we can parameterize the bit width of an integer type as follows:\nN: Static[int] = 32 a = Int[N](10) # 32-bit integer 10 b = Int[2 * N](20) # 64-bit integer 20 All of the standard arithmetic operations can be applied to static integers to produce new static integers.\nStatics can also be passed to the codon compiler via the -D flag, as in -DN=32.\nClasses can also be parameterized by statics:\nclass MyInt[N: Static[int]]: n: Int[N] x = MyInt[16](i16(42)) Static evaluation # In certain cases a program might need to check a particular type and perform different actions based on it. For example:\ndef flatten(x): if isinstance(x, list): for a in x: flatten(a) else: print(x) flatten([[1,2,3], [], [4, 5], [6]]) Standard static typing on this program would be problematic since, if x is an int, it would not be iterable and hence would produce an error on for a in x. Codon solves this problem by evaluating certain conditions at compile time, such as isinstance(x, list), and avoiding type checking blocks that it knows will never be reached. In fact, this program works and flattens the argument list.\nStatic evaluation works with plain static types as well as general types used in conjunction with type, isinstance or hasattr.\n"},{"id":29,"href":"/docs/readme/","title":"Readme","section":"Docs","content":" What is Codon? # Codon is a high-performance Python implementation that compiles to native machine code without any runtime overhead. Typical speedups over vanilla Python are on the order of 10-100x or more, on a single thread. Codon\u0026rsquo;s performance is typically on par with (and sometimes better than) that of C/C++. Unlike Python, Codon supports native multithreading, which can lead to speedups many times higher still.\nThink of Codon as Python reimagined for static, ahead-of-time compilation, built from the ground up with best possible performance in mind.\nGoals # \u0026#x1f4a1; No learning curve: Be as close to CPython as possible in terms of syntax, semantics and libraries \u0026#x1f680; Top-notch performance: At least on par with low-level languages like C, C++ or Rust \u0026#x1f4bb; Hardware support: Full, seamless support for multicore programming, multithreading (no GIL!), GPU and more \u0026#x1f4c8; Optimizations: Comprehensive optimization framework that can target high-level Python constructs and libraries \u0026#x1f50b; Interoperability: Full interoperability with Python\u0026rsquo;s ecosystem of packages and libraries Non-goals # \u0026#x274c; Drop-in replacement for CPython: Codon is not a drop-in replacement for CPython. There are some aspects of Python that are not suitable for static compilation — we don\u0026rsquo;t support these in Codon. There are ways to use Codon in larger Python codebases via its JIT decorator or Python extension backend. Codon also supports calling any Python module via its Python interoperability. See also \u0026ldquo;Differences with Python\u0026rdquo; in the docs.\n\u0026#x274c; New syntax and language constructs: We try to avoid adding new syntax, keywords or other language features as much as possible. While Codon does add some new syntax in a couple places (e.g. to express parallelism), we try to make it as familiar and intuitive as possible.\nHow it works # Quick start # Download and install Codon with this command:\n/bin/bash -c \u0026#34;$(curl -fsSL https://exaloop.io/install.sh)\u0026#34; After following the prompts, the codon command will be available to use. For example:\nTo run a program: codon run file.py To run a program with optimizations enabled: codon run -release file.py To compile to an executable: codon build -release file.py To generate LLVM IR: codon build -release -llvm file.py Many more options are available and described in the docs.\nExamples # Basics # Codon supports much of Python, and many Python programs will work with few if any modifications. Here\u0026rsquo;s a simple script fib.py that computes the 40th Fibonacci number\u0026hellip;\nfrom time import time def fib(n): return n if n \u0026lt; 2 else fib(n - 1) + fib(n - 2) t0 = time() ans = fib(40) t1 = time() print(f\u0026#39;Computed fib(40) = {ans} in {t1 - t0} seconds.\u0026#39;) \u0026hellip; run through Python and Codon:\n$ python3 fib.py Computed fib(40) = 102334155 in 17.979357957839966 seconds. $ codon run -release fib.py Computed fib(40) = 102334155 in 0.275645 seconds. Using Python libraries # You can import and use any Python package from Codon via from python import. For example:\nfrom python import matplotlib.pyplot as plt data = [x**2 for x in range(10)] plt.plot(data) plt.show() (Just remember to set the CODON_PYTHON environment variable to the CPython shared library, as explained in the the Python interoperability docs.)\nParallelism # Codon supports native multithreading via OpenMP. The @par annotation in the code below tells the compiler to parallelize the following for-loop, in this case using a dynamic schedule, chunk size of 100, and 16 threads.\nfrom sys import argv def is_prime(n): factors = 0 for i in range(2, n): if n % i == 0: factors += 1 return factors == 0 limit = int(argv[1]) total = 0 @par(schedule=\u0026#39;dynamic\u0026#39;, chunk_size=100, num_threads=16) for i in range(2, limit): if is_prime(i): total += 1 print(total) Note that Codon automatically turns the total += 1 statement in the loop body into an atomic reduction to avoid race conditions. Learn more in the multithreading docs.\nCodon also supports writing and executing GPU kernels. Here\u0026rsquo;s an example that computes the Mandelbrot set:\nimport gpu MAX = 1000 # maximum Mandelbrot iterations N = 4096 # width and height of image pixels = [0 for _ in range(N * N)] def scale(x, a, b): return a + (x/N)*(b - a) @gpu.kernel def mandelbrot(pixels): idx = (gpu.block.x * gpu.block.dim.x) + gpu.thread.x i, j = divmod(idx, N) c = complex(scale(j, -2.00, 0.47), scale(i, -1.12, 1.12)) z = 0j iteration = 0 while abs(z) \u0026lt;= 2 and iteration \u0026lt; MAX: z = z**2 + c iteration += 1 pixels[idx] = int(255 * iteration/MAX) mandelbrot(pixels, grid=(N*N)//1024, block=1024) GPU programming can also be done using the @par syntax with @par(gpu=True). See the GPU programming docs for more details.\nNumPy support # Codon includes a feature-complete, fully-compiled native NumPy implementation. It uses the same API as NumPy, but re-implements everything in Codon itself, allowing for a range of optimizations and performance improvements.\nHere\u0026rsquo;s an example NumPy program that approximates pi using random numbers\u0026hellip;\nimport time import numpy as np rng = np.random.default_rng(seed=0) x = rng.random(500_000_000) y = rng.random(500_000_000) t0 = time.time() # pi ~= 4 x (fraction of points in circle) pi = ((x-1)**2 + (y-1)**2 \u0026lt; 1).sum() * (4 / len(x)) t1 = time.time() print(f\u0026#39;Computed pi~={pi:.4f} in {t1 - t0:.2f} sec\u0026#39;) \u0026hellip; run through Python and Codon:\n$ python3 pi.py Computed pi~=3.1417 in 2.25 sec $ codon run -release pi.py Computed pi~=3.1417 in 0.43 sec Codon can speed up NumPy code through general-purpose and NumPy-specific compiler optimizations, including inlining, fusion, memory allocation elision and more. Furthermore, Codon\u0026rsquo;s NumPy implementation works with its multithreading and GPU capabilities, and can even integrate with PyTorch. Learn more in the Codon-NumPy docs.\n"},{"id":30,"href":"/docs/summary/","title":"Summary","section":"Docs","content":" Table of contents # Welcome to Codon General # Getting started Frequently asked questions Differences with Python Release notes Roadmap Language Features # Basics Collections Functions Classes Generators Statics Other types and features Foreign function interface Inline LLVM IR Interoperability # NumPy support Python integration Python decorator Python extensions C/C++ integration Jupyter integration Advanced # Parallelism and multithreading GPU programming Pipelines Intermediate representation Building from source "}]